From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sat, 13 Jul 2024 00:12:04 +0800
Subject: [PATCH] =?UTF-8?q?UI&ARC:=20logic=20Support=20=E5=A4=84=E7=90=86?=
 =?UTF-8?q?=E5=99=A8=E7=BC=96=E8=BE=91=E5=A2=9E=E5=BC=BA?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* 从Merged分离
* 修复注释切换功能；整理代码
* 实现JUMP跳转按钮
way-zer <himc.wicp@gmail.com> on 2024/7/13

重制内存元显示 和 处理器快捷显示
way-zer <himc.wicp@gmail.com> on 2024/7/14

防止多人模式下编辑世处，并给出提示
way-zer <himc.wicp@gmail.com> on 2024/9/8

clean

调整Jump样式，添加跳转强调

按钮调整
MinRi2 <2275045670@qq.com>

* 添加失效链接显示
* 清除链接建筑时更新逻辑代码
MinRi2 <2275045670@qq.com> on 2025/5/3
---
 core/src/mindustry/logic/LCanvas.java         | 59 ++++++++++++-
 core/src/mindustry/logic/LExecutor.java       |  3 +-
 core/src/mindustry/logic/LStatements.java     | 27 ++++++
 core/src/mindustry/logic/LogicDialog.java     | 30 +++++--
 .../world/blocks/logic/LogicBlock.java        | 87 ++++++++++++++++---
 .../world/blocks/logic/MemoryBlock.java       | 26 +++++-
 6 files changed, 211 insertions(+), 21 deletions(-)

diff --git a/core/src/mindustry/logic/LCanvas.java b/core/src/mindustry/logic/LCanvas.java
index 2bfd96ac4b9685bde38edee0d80be66380fdf6f2..cfd9503839daf8b4043827f2526d194ed5a3ed65 100644
--- a/core/src/mindustry/logic/LCanvas.java
+++ b/core/src/mindustry/logic/LCanvas.java
@@ -18,6 +18,9 @@ import mindustry.gen.*;
 import mindustry.graphics.*;
 import mindustry.logic.LStatements.*;
 import mindustry.ui.*;
+import mindustryX.*;
+import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
 public class LCanvas extends Table{
     private static final Seq<JumpCurve> tmpOccupiers1 = new Seq<>();
@@ -61,7 +64,7 @@ public class LCanvas extends Table{
 
     /** @return if statement elements should have rows. */
     public static boolean useRows(){
-        return Core.graphics.getWidth() < Scl.scl(900f) * 1.2f;
+        return Core.graphics.getWidth() - (LogicSupport.visible.get() ? 400f : 0f) < Scl.scl(900f) * 1.2f;
     }
 
     public static void tooltip(Cell<?> cell, String key){
@@ -433,14 +436,23 @@ public class LCanvas extends Table{
 
                 addressLabel = t.add(index + "").style(Styles.outlineLabel).color(color).padRight(8).get();
 
-                t.button(Icon.copy, Styles.logici, () -> {
-                }).size(24f).padRight(6).get().tapped(this::copy);
+                t.button(Icon.add, Styles.logici, () -> LogicDialog.showAddStatement(privileged, (it) -> {
+                    statements.addChildAfter(this, new StatementElem(it));
+                    statements.updateJumpHeights = true;
+                })).size(24f).padRight(6)
+                .get().tapped(()->{});//no drag
+
+                t.button(Icon.copy, Styles.logici, this::copy).size(24f).padRight(6)
+                .get().tapped(()->{});
+
+                t.button(st instanceof PrintStatement ? Icon.fileText : Icon.pencil, Styles.logici, this::toggleComment).size(24f).padRight(6)
+                .get().tapped(()->{});
 
                 t.button(Icon.cancel, Styles.logici, () -> {
                     remove();
                     dragging = null;
                     statements.updateJumpHeights = true;
-                }).size(24f);
+                }).size(24f).padLeft(Vars.mobile?48:0);
 
                 t.addListener(new InputListener(){
                     float lastx, lasty;
@@ -519,6 +531,45 @@ public class LCanvas extends Table{
             }
         }
 
+        //原始作者: LC
+        @MindustryXApi
+        public void toggleComment(){
+            StatementElem newElem;
+            if(st instanceof PrintStatement pst && !pst.value.isEmpty()){ //print->代码
+                String code = pst.value.replace("_", " ");
+                Seq<LStatement> lsStatement = LAssembler.read(code, privileged);
+                LStatement stNew = lsStatement.first();
+                if(stNew instanceof InvalidStatement){
+                    UIExt.announce("[orange]警告：转换失败，请输入正确格式");
+                    return;
+                }
+                newElem = new StatementElem(stNew);
+            }else{  //代码->print
+                st.saveUI();
+                StringBuilder thisText = new StringBuilder();
+                LogicIO.write(st, thisText);
+                var stNew = new PrintStatement();
+                stNew.value = thisText.toString().replace(' ','_');
+                newElem = new StatementElem(stNew);
+            }
+            for(Element c : statements.getChildren()){
+                if(c instanceof StatementElem ste && ste.st instanceof JumpStatement jst && (jst.dest == null || jst.dest == st.elem)){
+                    if(0 > jst.destIndex || jst.destIndex >= statements.getChildren().size) continue;
+                    jst.saveUI();
+                }
+            }
+            statements.addChildBefore(this, newElem);
+            remove();
+            for(Element c : statements.getChildren()){
+                if(c instanceof StatementElem ste && ste.st instanceof JumpStatement jst && (jst.dest == null || jst.dest == st.elem)){
+                    if(0 > jst.destIndex || jst.destIndex >= statements.getChildren().size) continue;
+                    jst.setupUI();
+                }
+            }
+            newElem.st.setupUI();
+        }
+
+
         @Override
         public void draw(){
             float pad = 5f;
diff --git a/core/src/mindustry/logic/LExecutor.java b/core/src/mindustry/logic/LExecutor.java
index ae4a1c8f0d28895875642ebd2903b9d5c3c3e483..353ad72b8d6dbab84856aeed50606fe0ca6b1223 100644
--- a/core/src/mindustry/logic/LExecutor.java
+++ b/core/src/mindustry/logic/LExecutor.java
@@ -515,6 +515,7 @@ public class LExecutor{
         public void run(LExecutor exec){
             Object obj = target.obj();
             if(obj instanceof Building b && (exec.privileged || (exec.build != null && exec.build.validLink(b)))){
+                b.lastLogicController = exec.build;
 
                 if(type == LAccess.enabled){
                     if(p1.bool()){
@@ -1250,7 +1251,7 @@ public class LExecutor{
         @Override
         public void run(LExecutor exec){
             if(headless) return;
-
+            if(Core.settings.getBool("removeLogicLock"))return;
             switch(action){
                 case pan -> {
                     control.input.logicCutscene = true;
diff --git a/core/src/mindustry/logic/LStatements.java b/core/src/mindustry/logic/LStatements.java
index 2d3a22342e4f6cfaa8524bcd9762898ecb1df52d..4d8c89b530ff5e341646faf858ef96191669ab2f 100644
--- a/core/src/mindustry/logic/LStatements.java
+++ b/core/src/mindustry/logic/LStatements.java
@@ -3,6 +3,9 @@ package mindustry.logic;
 import arc.*;
 import arc.func.*;
 import arc.graphics.*;
+import arc.math.*;
+import arc.scene.*;
+import arc.scene.actions.*;
 import arc.scene.style.*;
 import arc.scene.ui.*;
 import arc.scene.ui.layout.*;
@@ -21,6 +24,7 @@ import mindustry.ui.*;
 import mindustry.world.*;
 import mindustry.world.meta.*;
 import mindustryX.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 import static mindustry.logic.LCanvas.*;
@@ -1012,6 +1016,29 @@ public class LStatements{
             table.table(this::rebuild);
 
             table.add().growX();
+            if(!mobile || !Core.graphics.isPortrait()){
+                table.button("JUMP", Styles.grayt, () -> {
+                    if(dest == null) return;
+                    //table, elem, dragLayout, table(y), scrollPane
+                    var canvas = dest.parent.parent;
+                    var scroll = (ScrollPane)canvas.parent;
+                    scroll.setScrollY(scroll.getMaxY() - dest.y + scroll.getHeight() * 0.5f);
+                    saveUI();
+                    UIExt.announce("[gold]跳转行号:[] " + destIndex);
+
+                    Element header = dest.getChildren().first();
+                    dest.clearActions();
+                    header.clearActions();
+                    dest.addAction(Actions.repeat(2, Actions.sequence(
+                    Actions.color(Pal.placing, 0.5f, Interp.smooth),
+                    Actions.color(dest.st.category().color, 0.5f, Interp.smooth)
+                    )));
+                    header.addAction(Actions.repeat(2, Actions.sequence(
+                    Actions.color(Pal.placing, 0.5f, Interp.smooth),
+                    Actions.color(dest.st.category().color, 0.5f, Interp.smooth)
+                    )));
+                }).width(80f);
+            }
             table.add(new JumpButton(() -> dest, s -> dest = s, this.elem)).size(30).right().padLeft(-8);
 
             String name = name();
diff --git a/core/src/mindustry/logic/LogicDialog.java b/core/src/mindustry/logic/LogicDialog.java
index 350f1f3694d198f0f7d2f2ab842eab0c7f2ed93d..297e8646e67f29ad8b4bcde7efce4e53392dabf8 100644
--- a/core/src/mindustry/logic/LogicDialog.java
+++ b/core/src/mindustry/logic/LogicDialog.java
@@ -5,6 +5,7 @@ import arc.func.*;
 import arc.graphics.*;
 import arc.input.*;
 import arc.scene.actions.*;
+import arc.scene.event.*;
 import arc.scene.ui.*;
 import arc.scene.ui.TextButton.*;
 import arc.scene.ui.layout.*;
@@ -19,6 +20,9 @@ import mindustry.logic.LStatements.*;
 import mindustry.ui.*;
 import mindustry.ui.dialogs.*;
 import mindustry.world.blocks.logic.*;
+import mindustryX.*;
+import mindustryX.features.*;
+import mindustryX.features.Settings;
 
 import java.util.*;
 
@@ -29,9 +33,10 @@ public class LogicDialog extends BaseDialog{
     public LCanvas canvas;
     Cons<String> consumer = s -> {};
     boolean privileged;
+
     @Nullable LExecutor executor;
     GlobalVarsDialog globalsDialog = new GlobalVarsDialog();
-    boolean wasRows, wasPortrait, forceRestart;
+    boolean wasRows, wasPortrait, forceRestart, noSave;
 
     public LogicDialog(){
         super("logic");
@@ -48,7 +53,12 @@ public class LogicDialog extends BaseDialog{
             wasRows = LCanvas.useRows();
             wasPortrait = Core.graphics.isPortrait();
         });
-        hidden(() -> consumer.get(canvas.save()));
+        hidden(() -> {
+            if(!noSave){
+                consumer.get(canvas.save());
+            } else {
+                noSave = false;
+            }});
         onResize(() -> {
             if(wasRows != LCanvas.useRows() || wasPortrait != Core.graphics.isPortrait()){
                 setup();
@@ -149,7 +159,12 @@ public class LogicDialog extends BaseDialog{
                         dialog.hide();
                         hide();
                     }).marginLeft(12f);
-
+                    t.row();
+                    t.button("[orange]丢弃更改", Icon.cancel,style, () -> ui.showConfirm("确认丢弃?", () -> {
+                        noSave = true;
+                        dialog.hide();
+                        hide();
+                    })).marginLeft(12f);
                 });
             });
 
@@ -254,6 +269,11 @@ public class LogicDialog extends BaseDialog{
     }
 
     public void showAddDialog(){
+        showAddStatement(privileged, (t) -> canvas.add(t));
+    }
+
+    @MindustryXApi
+    public static void showAddStatement(boolean privileged, Cons<LStatement> cons){
         BaseDialog dialog = new BaseDialog("@add");
         dialog.cont.table(table -> {
             String[] searchText = {""};
@@ -278,7 +298,7 @@ public class LogicDialog extends BaseDialog{
 
                     search.keyDown(KeyCode.enter, () -> {
                         if(!searchText[0].isEmpty() && matched[0] != null){
-                            canvas.add((LStatement)matched[0].get());
+                            cons.get((LStatement)matched[0].get());
                             dialog.hide();
                         }
                     });
@@ -326,7 +346,7 @@ public class LogicDialog extends BaseDialog{
                         style.font = Fonts.outline;
 
                         cat.button(example.name(), style, () -> {
-                            canvas.add(prov.get());
+                            cons.get(prov.get());
                             dialog.hide();
                         }).size(130f, 50f).self(c -> tooltip(c, "lst." + example.name())).top().left();
 
diff --git a/core/src/mindustry/world/blocks/logic/LogicBlock.java b/core/src/mindustry/world/blocks/logic/LogicBlock.java
index fac800a84d4ea6e00295584133309b7bab9fed0d..5b875e0a1228180a64c4d9f6a98b9d96811c8898 100644
--- a/core/src/mindustry/world/blocks/logic/LogicBlock.java
+++ b/core/src/mindustry/world/blocks/logic/LogicBlock.java
@@ -16,17 +16,21 @@ import arc.util.io.*;
 import arc.util.pooling.*;
 import mindustry.ai.types.*;
 import mindustry.core.*;
+import mindustry.game.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
 import mindustry.io.*;
 import mindustry.io.TypeIO.*;
 import mindustry.logic.*;
 import mindustry.ui.*;
+import mindustry.ui.dialogs.*;
 import mindustry.world.*;
 import mindustry.world.blocks.ConstructBlock.*;
 import mindustry.world.meta.*;
 import mindustryX.*;
 import mindustryX.events.*;
+import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
 import java.io.*;
 import java.util.zip.*;
@@ -105,11 +109,15 @@ public class LogicBlock extends Block{
 
     @Override
     public boolean checkForceDark(Tile tile){
-        return !accessible();
+        return !accessibleRead();
     }
 
     public boolean accessible(){
-        return !privileged || state.rules.editor || state.playtestingMap != null || state.rules.allowEditWorldProcessors;
+        return !privileged || state.rules.editor || state.playtestingMap != null || state.rules.allowEditWorldProcessors || RenderExt.editOtherBlock;
+    }
+
+    private boolean accessibleRead(){
+        return accessible() || RenderExt.showOtherInfo;
     }
 
     @Override
@@ -245,6 +253,8 @@ public class LogicBlock extends Block{
         public @Nullable String tag;
         public char iconTag;
 
+        private static boolean showVars = false;
+
         /** Block of code to run after load. */
         public @Nullable Runnable loadBlock;
 
@@ -416,7 +426,7 @@ public class LogicBlock extends Block{
 
         @Override
         public boolean displayable(){
-            return accessible();
+            return accessibleRead();
         }
 
         @Override
@@ -439,7 +449,12 @@ public class LogicBlock extends Block{
 
         @Override
         public Cursor getCursor(){
-            return !accessible() ? SystemCursor.arrow : super.getCursor();
+            return !accessibleRead() ? SystemCursor.arrow : super.getCursor();
+        }
+
+        @Override
+        public boolean interactable(Team team){
+            return super.interactable(team) || RenderExt.showOtherInfo;
         }
 
         //logic blocks cause write problems when picked up
@@ -598,24 +613,30 @@ public class LogicBlock extends Block{
             }
 
             for(LogicLink l : links){
-                Building build = world.build(l.x, l.y);
-                if(validLink(build)){
+                Tile tile = world.tile(l.x, l.y);
+                if(tile == null) continue;
+                Building build = tile.build;
+                if(!validLink(build)){
+                    Drawf.square(tile.drawx(), tile.drawy(), tilesize / 2f + 1f, Tmp.c1.set(Pal.noplace).a(0.8f));
+                }else{
                     Drawf.square(build.x, build.y, build.block.size * tilesize / 2f + 1f, Pal.place);
                 }
             }
 
             //draw top text on separate layer
+            //draw link order
+            int i = 0;
             for(LogicLink l : links){
                 Building build = world.build(l.x, l.y);
                 if(validLink(build)){
-                    build.block.drawPlaceText(l.name, build.tileX(), build.tileY(), true);
+                    build.block.drawPlaceText(l.name + "[" + i++ + "]", build.tileX(), build.tileY(), true);
                 }
             }
         }
 
         @Override
         public void drawSelect(){
-            if(!accessible()) return;
+            if(!accessibleRead()) return;
 
             Groups.unit.each(u -> u.controller() instanceof LogicAI ai && ai.controller == this, unit -> {
                 Drawf.square(unit.x, unit.y, unit.hitSize, unit.rotation + 45);
@@ -662,12 +683,58 @@ public class LogicBlock extends Block{
 
         @Override
         public boolean shouldShowConfigure(Player player){
-            return accessible();
+            return accessibleRead();
         }
 
         @Override
         public void buildConfiguration(Table table){
-            table.button(Icon.pencil, Styles.cleari, this::showEditDialog).size(40);
+            table.setBackground(Styles.black3);
+            Table vars = new Table();
+            table.table(t -> {
+                t.defaults().size(40);
+                t.button(Icon.pencil, Styles.cleari, ()->{
+                    if(!accessible())
+                        UIExt.announce("[yellow]当前无权编辑，仅供查阅");
+                    showEditDialog();
+                });
+                t.button(Icon.info, Styles.cleari, () -> {
+                    showVars = !showVars;
+                    vars.clear();
+                    if(showVars) buildVarsTable(vars);
+                });
+                t.button(Icon.trash, Styles.cleari, () -> {
+                    links.clear();
+                    updateCode(code, true, null);
+                }).disabled(b -> net.client()).tooltip("重置所有链接");
+            });
+            table.row().pane(Styles.noBarPane, vars).pad(4).maxHeight(400f).get().setScrollingDisabledX(true);
+            if(showVars) buildVarsTable(vars);
+        }
+
+        private void buildVarsTable(Table table){
+            final var vars = executor.vars;
+            table.update(() -> {
+                if(vars != executor.vars){
+                    table.clear();
+                    buildVarsTable(table);
+                    return;
+                }
+                table.getCells().each(cell -> {
+                    if(cell.prefWidth() > cell.maxWidth()){
+                        cell.width(cell.prefWidth());
+                        table.invalidateHierarchy();
+                    }
+                });
+                if(table.needsLayout()) table.parent.parent.pack();
+            });
+
+            table.setColor(Color.lightGray);
+            for(var s : vars){
+                if(s.name.startsWith("___")) continue;
+                table.add(s.name).color(LogicSupport.arcVarsColor(s)).align(Align.left);
+                table.label(() -> LogicSupport.arcVarsText(s)).align(Align.right).labelAlign(Align.right);
+                table.row();
+            }
         }
 
         public void showEditDialog(){
diff --git a/core/src/mindustry/world/blocks/logic/MemoryBlock.java b/core/src/mindustry/world/blocks/logic/MemoryBlock.java
index fe746076808f5826718bedf5190bc63bdf61d640..f0bafe9cc47d97d096b3121f993661ed8431f3e5 100644
--- a/core/src/mindustry/world/blocks/logic/MemoryBlock.java
+++ b/core/src/mindustry/world/blocks/logic/MemoryBlock.java
@@ -1,12 +1,15 @@
 package mindustry.world.blocks.logic;
 
+import arc.scene.ui.layout.*;
 import arc.util.io.*;
 import mindustry.gen.*;
 import mindustry.logic.*;
 import mindustry.world.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
-import static mindustry.Vars.*;
+import static mindustry.Vars.state;
 
 public class MemoryBlock extends Block{
     public int memoryCapacity = 32;
@@ -19,6 +22,7 @@ public class MemoryBlock extends Block{
         drawDisabled = false;
         envEnabled = Env.any;
         canOverdrive = false;
+        configurable = true;
     }
 
     @Override
@@ -103,6 +107,26 @@ public class MemoryBlock extends Block{
             }
         }
 
+        @Override
+        public boolean onConfigureBuildTapped(Building other){
+            if(this == other || !accessible()){
+                deselect();
+                return false;
+            }
+            return super.onConfigureBuildTapped(other);
+        }
+
+        @Override
+        public void buildConfiguration(Table table){
+            if(!RenderExt.showOtherInfo && !accessible()){
+                //go away
+                deselect();
+                return;
+            }
+
+            LogicSupport.buildMemoryTools(table, this);
+        }
+
         @Override
         public void read(Reads read, byte revision){
             super.read(read, revision);
