From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sun, 8 Sep 2024 15:43:00 +0800
Subject: [PATCH] =?UTF-8?q?FC(LogicExt)=20worldCreator=20(=E5=88=9B?=
 =?UTF-8?q?=E4=B8=96=E7=A5=9E)=20allUnlocked=20(=E8=A7=A3=E7=A6=81)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 core/src/mindustry/ctype/UnlockableContent.java       |  5 +++--
 core/src/mindustry/ui/dialogs/DatabaseDialog.java     | 11 +++++++++--
 .../src/mindustry/ui/fragments/PlacementFragment.java |  9 ++++++++-
 core/src/mindustry/world/Block.java                   |  4 ++--
 core/src/mindustry/world/Build.java                   |  6 ++++++
 core/src/mindustry/world/blocks/ItemSelection.java    |  3 ++-
 6 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/core/src/mindustry/ctype/UnlockableContent.java b/core/src/mindustry/ctype/UnlockableContent.java
index 1a2407026f64bc000b59cd63d5a67708aeac95b2..86d53f8e0bcb68fc8f357c3605d550ce0875dd2e 100644
--- a/core/src/mindustry/ctype/UnlockableContent.java
+++ b/core/src/mindustry/ctype/UnlockableContent.java
@@ -17,6 +17,7 @@ import mindustry.graphics.MultiPacker.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -229,7 +230,7 @@ public abstract class UnlockableContent extends MappableContent{
     }
 
     public boolean unlockedNowHost(){
-        return !state.isCampaign() || unlockedHost();
+        return mindustryX.VarsX.allUnlocked.get() || !state.isCampaign() || unlockedHost();
     }
 
     /** @return in multiplayer, whether this is unlocked for the host player, otherwise, whether it is unlocked for the local player (same as unlocked()) */
@@ -241,7 +242,7 @@ public abstract class UnlockableContent extends MappableContent{
 
     /** @return whether this content is unlocked, or the player is in a custom (non-campaign) game. */
     public boolean unlockedNow(){
-        return unlocked() || !state.isCampaign();
+        return mindustryX.VarsX.allUnlocked.get() || unlocked() || !state.isCampaign();
     }
 
     public boolean unlocked(){
diff --git a/core/src/mindustry/ui/dialogs/DatabaseDialog.java b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
index 663110a852d5b63e5da40ee62dac10a3a329852b..e9daeae7c7ec493624d313ec540ab8c0c53e710c 100644
--- a/core/src/mindustry/ui/dialogs/DatabaseDialog.java
+++ b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
@@ -46,6 +46,11 @@ public class DatabaseDialog extends BaseDialog{
         });
         onResize(this::rebuild);
 
+        buttons.button("解禁", Styles.togglet, () -> {
+            mindustryX.VarsX.allUnlocked.toggle();
+            rebuild();
+        }).checked((b) -> mindustryX.VarsX.allUnlocked.get());
+
         all.margin(20).marginTop(0f).marginRight(30f);
 
         cont.top();
@@ -100,7 +105,9 @@ public class DatabaseDialog extends BaseDialog{
             ContentType type = ContentType.all[j];
 
             Seq<UnlockableContent> array = allContent[j]
-                .select(c -> c instanceof UnlockableContent u && !u.isHidden() && !u.hideDatabase && (tab == Planets.sun || u.allDatabaseTabs || u.databaseTabs.contains(tab)) &&
+                .select(c -> c instanceof UnlockableContent u &&
+                    (mindustryX.VarsX.allUnlocked.getValue() || !u.isHidden() && !u.hideDatabase) &&
+                    (tab == Planets.sun || u.allDatabaseTabs || u.databaseTabs.contains(tab)) &&
                     (text.isEmpty() || u.localizedName.toLowerCase().contains(text))).as();
 
             if(array.size == 0) continue;
@@ -166,6 +173,6 @@ public class DatabaseDialog extends BaseDialog{
     }
 
     boolean unlocked(UnlockableContent content){
-        return (!Vars.state.isCampaign() && !Vars.state.isMenu()) || content.unlocked();
+        return mindustryX.VarsX.allUnlocked.get() || (!Vars.state.isCampaign() && !Vars.state.isMenu()) || content.unlocked();
     }
 }
diff --git a/core/src/mindustry/ui/fragments/PlacementFragment.java b/core/src/mindustry/ui/fragments/PlacementFragment.java
index be3d68cbc309505b39f4dbadcf62fa8cd1ab9d69..2f78972b3e66133672bc9d5fa2ed531849829502 100644
--- a/core/src/mindustry/ui/fragments/PlacementFragment.java
+++ b/core/src/mindustry/ui/fragments/PlacementFragment.java
@@ -26,8 +26,10 @@ import mindustry.input.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustry.world.blocks.*;
 import mindustry.world.blocks.ConstructBlock.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -109,6 +111,10 @@ public class PlacementFragment{
                 if(nextFlowBuild.flowItems() != null) nextFlowBuild.flowItems().updateFlow();
                 if(nextFlowBuild.liquids != null) nextFlowBuild.liquids.updateFlow();
             }
+
+            if(mindustryX.VarsX.allUnlocked.changed("placement")){
+                rebuild();
+            }
         });
     }
 
@@ -289,6 +295,7 @@ public class PlacementFragment{
 
                     for(Block block : getUnlockedByCategory(currentCategory)){
                         if(!unlocked(block)) continue;
+                        if (block == Blocks.air || block instanceof ConstructBlock) continue;
                         if(index++ % rowWidth == 0){
                             blockTable.row();
                         }
@@ -745,7 +752,7 @@ public class PlacementFragment{
     }
 
     boolean unlocked(Block block){
-        return block.unlockedNowHost() && block.placeablePlayer && block.environmentBuildable() &&
+        return mindustryX.VarsX.allUnlocked.get() || block.unlockedNowHost() && block.placeablePlayer && block.environmentBuildable() &&
             block.supportsEnv(state.rules.env);
     }
 
diff --git a/core/src/mindustry/world/Block.java b/core/src/mindustry/world/Block.java
index 82c470176e8c5465ab03c1c4c8a327c0ab65b43b..e2dff1928221ffe0f4568000388e2bd3d24e2b8e 100644
--- a/core/src/mindustry/world/Block.java
+++ b/core/src/mindustry/world/Block.java
@@ -922,11 +922,11 @@ public class Block extends UnlockableContent implements Senseable{
     }
 
     public boolean isVisible(){
-        return !isHidden() && (state.rules.editor || (!state.rules.hideBannedBlocks || !isBanned()));
+        return mindustryX.VarsX.allUnlocked.get() || !isHidden() && (state.rules.editor || (!state.rules.hideBannedBlocks || !isBanned()));
     }
 
     public boolean isPlaceable(){
-        return isVisible() && (!isBanned() || state.rules.editor) && supportsEnv(state.rules.env);
+        return LogicExt.worldCreator || isVisible() && (!isBanned() || state.rules.editor) && supportsEnv(state.rules.env);
     }
 
     @Override
diff --git a/core/src/mindustry/world/Build.java b/core/src/mindustry/world/Build.java
index 6948e6910e0cef504ac07db7edeaf12183faf9b5..a35ab3a3ce519bd0879d4ff3a28aa001cc30aed3 100644
--- a/core/src/mindustry/world/Build.java
+++ b/core/src/mindustry/world/Build.java
@@ -15,6 +15,7 @@ import mindustry.gen.*;
 import mindustry.world.blocks.*;
 import mindustry.world.blocks.ConstructBlock.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -179,6 +180,10 @@ public class Build{
 
     /** @return whether a tile can be placed at this location by this team. Ignores units at this location. */
     public static boolean validPlaceIgnoreUnits(Block type, Team team, int x, int y, int rotation, boolean checkVisible, boolean checkCoreRadius){
+        if (LogicExt.worldCreator) {
+            Tile tile = world.tile(x, y);
+            return tile != null;
+        }
         //the wave team can build whatever they want as long as it's visible - banned blocks are not applicable
         if(type == null || (!state.rules.editor && (checkVisible && (!type.environmentBuildable() || (!type.isPlaceable() && !(state.rules.waves && team == state.rules.waveTeam && type.isVisible())))))){
             return false;
@@ -306,6 +311,7 @@ public class Build{
     /** @return whether the tile at this position is breakable by this team */
     public static boolean validBreak(Team team, int x, int y){
         Tile tile = world.tile(x, y);
+        if(LogicExt.worldCreator && tile.block() != Blocks.air) return true;
         return tile != null && tile.block() != Blocks.air && (tile.block().canBreak(tile) && (tile.breakable() || state.rules.allowEnvironmentDeconstruct)) && tile.interactable(team);
     }
 }
diff --git a/core/src/mindustry/world/blocks/ItemSelection.java b/core/src/mindustry/world/blocks/ItemSelection.java
index bee9056df6ef4b96d48803ce67e89580026d85a4..e5ad711ae78d455e687c7c29f5e475847dd2e601 100644
--- a/core/src/mindustry/world/blocks/ItemSelection.java
+++ b/core/src/mindustry/world/blocks/ItemSelection.java
@@ -12,6 +12,7 @@ import mindustry.ctype.*;
 import mindustry.gen.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -67,7 +68,7 @@ public class ItemSelection{
 
             Seq<T> list = items.select(u -> (text.isEmpty() || u.localizedName.toLowerCase().contains(text.toLowerCase())));
             for(T item : list){
-                if(!item.unlockedNow() || !item.isOnPlanet(state.getPlanet()) || item.isHidden()) continue;
+                if(!mindustryX.VarsX.allUnlocked.get() && (!item.unlockedNow() || !item.isOnPlanet(state.getPlanet()) || item.isHidden())) continue;
 
                 ImageButton button = cont.button(Tex.whiteui, Styles.clearNoneTogglei, Mathf.clamp(item.selectionSize, 0f, 40f), () -> {
                     if(closeSelect) control.input.config.hideConfig();
