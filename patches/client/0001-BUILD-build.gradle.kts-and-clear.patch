From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Fri, 23 Jun 2023 15:42:03 +0800
Subject: [PATCH] BUILD build.gradle.kts and clear

clear and replce jabel(Support record)
way-zer <himc.wicp@gmail.com> on 2024/6/9
---
 .gitignore                                    |   2 +-
 android/build.gradle                          | 102 ++----
 android/proguard-rules.pro                    |   4 +
 .../com/github/bsideup/jabel/Desugar.java     |  13 +
 .../javax.annotation.processing.Processor     |   6 +
 build.gradle                                  | 304 +++---------------
 core/build.gradle                             |   2 -
 core/build.gradle.kts                         |  66 ++++
 desktop/build.gradle                          | 166 +---------
 gradle.properties                             |   7 +-
 gradlew                                       | 284 +++++++++-------
 gradlew.bat                                   |  37 ++-
 ios/build.gradle                              |   2 +-
 server/build.gradle                           |  44 +--
 settings.gradle                               |  11 +-
 tools/build.gradle                            |  91 +++---
 tools/src/mindustry/tools/Generators.java     |   2 +-
 17 files changed, 445 insertions(+), 698 deletions(-)
 create mode 100644 annotations/src/main/java/com/github/bsideup/jabel/Desugar.java
 create mode 100644 annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor
 delete mode 100644 core/build.gradle
 create mode 100644 core/build.gradle.kts

diff --git a/.gitignore b/.gitignore
index 5e3b7987ef4f776a0bc35dde58fb2c74f4acdb07..b5b2a237c2f5343aab2fb668337c2bc47a45c1b8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -29,6 +29,7 @@ saves/
 /core/assets-raw/fontgen/out/
 /core/assets-raw/fontgen/icons/
 /core/assets-raw/fontgen/icon_parts/
+/core/assets-raw/packed/
 core/assets/saves/
 /core/assets/saves/
 steam_appid.txt
@@ -36,7 +37,6 @@ steam_appid.txt
 /android/assets/mindustry-maps/
 /android/assets/mindustry-saves/
 /core/assets/gifexport/
-/annotations/src/main/resources/META-INF/services
 /core/assets/version.properties
 /core/assets/locales
 /core/assets/cache/
diff --git a/android/build.gradle b/android/build.gradle
index 6f349ef7b732d3530f409599c6e7cf1d7d102272..5fa9542a0f83fed0797f9a1c65803a7a7d085cb6 100644
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -1,45 +1,23 @@
-buildscript{
-    repositories{
-        mavenLocal()
-        mavenCentral()
-        google()
-        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
-    }
-
-    dependencies{
-        classpath 'com.android.tools.build:gradle:8.2.2'
-    }
+plugins{
+    id("com.android.application") version "8.9.2"
 }
 
-apply plugin: "com.android.application"
-
 configurations{ natives }
 
 repositories{
     mavenCentral()
-    maven{ url "https://maven.google.com" }
-}
-
-task deploy(type: Copy){
-    dependsOn "assembleRelease"
-
-    from "build/outputs/apk/release/android-release.apk"
-    into "../deploy/"
-    rename("android-release.apk", "${generateDeployName('android')}.apk")
+    maven{ url "https://dl.google.com/dl/android/maven2/" }
 }
 
 android{
-    namespace = "io.anuke.mindustry"
-    buildToolsVersion = '36.0.0'
+    namespace = "com.github.tinylake.mindustryX"
     compileSdk = 36
     sourceSets{
         main{
             manifest.srcFile 'AndroidManifest.xml'
             java.srcDirs = ['src']
-            aidl.srcDirs = ['src']
-            renderscript.srcDirs = ['src']
             res.srcDirs = ['res']
-            assets.srcDirs = ['assets', 'src/main/assets', '../core/assets/']
+            assets.srcDirs = ['../core/assets/', '../../assets/']
             jniLibs.srcDirs = ['libs']
         }
 
@@ -51,23 +29,22 @@ android{
     }
 
     defaultConfig{
-        Properties props = loadVersionProps()
-        Integer vcode = props['androidBuildCode']?.toInteger() ?: 1
         def versionNameResult = "$versionNumber-$versionType-${getBuildVersion().replace(" ", "-")}"
 
         applicationId "io.anuke.mindustry"
-        minSdkVersion 14
+        minSdkVersion 21
         targetSdkVersion 36
-
         versionName versionNameResult
-        versionCode = vcode
+        versionCode = 1
+        multiDexEnabled true
 
         if(project.hasProperty("release")){
+            Properties props = loadVersionProps()
+            Integer vcode = props['androidBuildCode']?.toInteger() ?: 1
+            versionCode = vcode
             props['androidBuildCode'] = (vcode + 1).toString()
+            props.store(file('../core/assets/version.properties').newWriter(), null)
         }
-        props.store(file('../core/assets/version.properties').newWriter(), null)
-
-        multiDexEnabled true
     }
 
     compileOptions{
@@ -96,7 +73,7 @@ android{
     }
 
     buildTypes{
-        all{
+        release{
             //TODO without these lines (r8 enabled), Mindustry crashes with missing default interface method errors.
             //WHY THE HELL ARE DEFAULT INTERFACES NOT BEING DESUGARED? WHY DID UPDATING AGP MAKE THIS HAPPEN?
             //When I ENABLE shrinking, r8 goes and REMOVES ALL DEFAULT INTERFACE CLASSES, which breaks mods. Why?
@@ -104,12 +81,7 @@ android{
             minifyEnabled = true
             shrinkResources = true
             proguardFiles("proguard-rules.pro")
-        }
-    }
-
-    if(project.hasProperty("RELEASE_STORE_FILE") || System.getenv("CI") == "true"){
-        buildTypes{
-            release{
+            if(project.hasProperty("RELEASE_STORE_FILE") || System.getenv("CI") == "true"){
                 signingConfig signingConfigs.release
             }
         }
@@ -121,39 +93,31 @@ dependencies{
 
     implementation arcModule("backends:backend-android")
     implementation 'com.jakewharton.android.repackaged:dalvik-dx:9.0.0_r3'
+    implementation 'androidx.core:core:1.16.0'
 
-    natives "com.github.Anuken.Arc:natives-android:$arcHash"
-    natives "com.github.Anuken.Arc:natives-freetype-android:$arcHash"
-
-    def version;
-    def highestVersion;
-    new File((String)findSdkDir(), "/platforms").eachFileMatch ~/android-\d+/, {
-        version = it.name.find(/\d+/).toInteger();
-        highestVersion = version > highestVersion ? version : highestVersion;
-    }
-
-    def sdkFile = new File((String)findSdkDir(), "/platforms/android-${highestVersion}/android.jar")
-    if(sdkFile.exists()) compileOnly files(sdkFile.absolutePath)
+    natives arcModule("natives-android")
+    natives arcModule("natives-freetype-android")
 }
 
-task copyAndroidNatives(){
-    configurations.natives.files.each{ jar ->
-        copy{
-            from zipTree(jar)
-            into file("libs/")
-            include "**"
-        }
+tasks.register('copyAndroidNatives', Copy){
+    from(configurations.natives.collect{ zipTree(it) }){
+        exclude("META-INF/**")
     }
+    into file("libs/")
 }
 
-task run(type: Exec){
-    commandLine "${findSdkDir()}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'io.anuke.mindustry/mindustry.android.AndroidLauncher'
+tasks.register('run', Exec){
+    commandLine "adb", 'shell', 'am', 'start', '-n', 'io.anuke.mindustry/mindustry.android.AndroidLauncher'
 }
 
-if(!project.ext.hasSprites()){
-    tasks.whenTaskAdded{ task ->
-        if(task.name == 'assembleDebug' || task.name == 'assembleRelease'){
-            task.dependsOn ":tools:pack"
-        }
+tasks.configureEach{ task ->
+    if(task.name == 'mergeDebugAssets' || task.name == 'mergeReleaseAssets' || task.name == 'lintVitalAnalyzeRelease' || task.name == 'generateReleaseLintVitalReportModel'){
+        task.dependsOn ":core:allAssets"
     }
-}
+    if(task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders'){
+        task.dependsOn "copyAndroidNatives"
+    }
+    if(task.name == 'mergeReleaseAssets' || task.name == 'compressReleaseAssets'){
+        task.outputs.doNotCacheIf("Not worth caching"){ true }
+    }
+}
\ No newline at end of file
diff --git a/android/proguard-rules.pro b/android/proguard-rules.pro
index 532c10ea01dbacc5632c8a68f97885e1b1454089..315ef050c567d91f05910863c8c822a8b43eae57 100644
--- a/android/proguard-rules.pro
+++ b/android/proguard-rules.pro
@@ -6,6 +6,10 @@
 -keep class rhino.** { *; }
 -keep class com.android.dex.** { *; }
 -keep class com.android.dx.** { *; }
+-keep class mindustryX.** { *; }
+-keep class kotlin.** { *; }
+-keep class org.jetbrains.annotations.** { *; }
+-keep class org.intellij.lang.annotations.** { *; }
 -keepattributes Signature,*Annotation*,InnerClasses,EnclosingMethod
 
 -dontwarn javax.naming.**
diff --git a/annotations/src/main/java/com/github/bsideup/jabel/Desugar.java b/annotations/src/main/java/com/github/bsideup/jabel/Desugar.java
new file mode 100644
index 0000000000000000000000000000000000000000..dcea5cdf03b366f9f59e20511dafee3601e15fb6
--- /dev/null
+++ b/annotations/src/main/java/com/github/bsideup/jabel/Desugar.java
@@ -0,0 +1,13 @@
+package com.github.bsideup.jabel;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Documented
+@Retention(RetentionPolicy.SOURCE)
+@Target({ElementType.TYPE})
+public @interface Desugar {
+}
diff --git a/annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor
new file mode 100644
index 0000000000000000000000000000000000000000..181b87c1d5f3755f16a01c0528d0a89f79d14ead
--- /dev/null
+++ b/annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor
@@ -0,0 +1,6 @@
+mindustry.annotations.entity.EntityProcess
+mindustry.annotations.impl.AssetsProcess
+mindustry.annotations.impl.StructProcess
+mindustry.annotations.misc.LoadRegionProcessor
+mindustry.annotations.misc.LogicStatementProcessor
+mindustry.annotations.remote.RemoteProcess
diff --git a/build.gradle b/build.gradle
index 48786c78c44affcf7fdb1c9e7a7d6281226d3677..acfdc20cf3ecbfe27b360b16bb86e42aedaa568e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,30 +1,16 @@
-import java.text.SimpleDateFormat
-
 buildscript{
     ext{
-        arcHash = property("archash")
+        arcHash = findProperty("archash") ?: "v${property("upstreamBuild")}"
 
         localArc = !project.hasProperty("release") && new File(rootDir.parent, 'Arc').exists() && !project.hasProperty("noLocalArc")
 
         arcModule = { String name ->
+            def useLocalArc = localArc && !name.startsWith("native")
             //skip to last submodule
             name = name.substring(name.lastIndexOf(':') + 1)
-            return "com.github.Anuken${localArc ? "" : ".Arc"}:$name:$arcHash"
+            return "com.github.Anuken${useLocalArc ? "" : ".Arc"}:$name:$arcHash"
         }
     }
-
-    repositories{
-        mavenLocal()
-        mavenCentral()
-        google()
-        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
-        maven{ url 'https://jitpack.io' }
-    }
-
-    dependencies{
-        classpath arcModule(":extensions:packer")
-        classpath arcModule(":arc-core")
-    }
 }
 
 plugins{
@@ -50,132 +36,10 @@ allprojects{
             return new Properties().with{p -> p.load(file('../core/assets/version.properties').newReader()); return p }
         }
 
-        debugged = {
-            return new File(projectDir.parent, '../Mindustry-Debug').exists() && !project.hasProperty("release") && project.hasProperty("args")
-        }
-
-        generateDeployName = { String platform ->
-            if(platform == "windows"){
-                platform += "64"
-            }
-            platform = platform.capitalize()
-
-            if(platform.endsWith("64") || platform.endsWith("32")){
-                platform = "${platform.substring(0, platform.length() - 2)}-${platform.substring(platform.length() - 2)}bit"
-            }
-
-            return "[${platform}]${getModifierString()}[${getNeatVersionString()}]${appName}"
-        }
-
-        getVersionString = {
-            String buildVersion = getBuildVersion()
-            return "$versionNumber-$versionModifier-$buildVersion"
-        }
-
-        getNeatVersionString = {
-            String buildVersion = getBuildVersion()
-            return "v$buildVersion"
-        }
-
-        hasSprites = {
-            return new File(rootDir, "core/assets/sprites/sprites.aatls").exists()
-        }
-
-        getModifierString = {
-            if(versionModifier != "release") return "[${versionModifier.toUpperCase()}]"
-            return ""
-        }
-
         getBuildVersion = {
             if(!project.hasProperty("buildversion")) return "custom build"
             return project.getProperties()["buildversion"]
         }
-
-        getCommitHash = {
-            return 'git rev-parse --verify --short HEAD'.execute().text.trim()
-        }
-
-        getPackage = {
-            return project.ext.mainClassName.substring(0, project.ext.mainClassName.indexOf("desktop") - 1)
-        }
-
-        findSdkDir = {
-            //null because IntelliJ doesn't get env variables
-            def v = System.getenv("ANDROID_HOME")
-            if(v != null) return v
-            //rootDir is null here, amazing. brilliant.
-            def file = new File(rootDir, "local.properties")
-            def props = new Properties().with{p -> p.load(file.newReader()); return p }
-            return props.get("sdk.dir")
-        }
-
-        generateLocales = {
-            def output = 'en\n'
-            def bundles = new File(project(':core').projectDir, 'assets/bundles/')
-            bundles.list().sort().each{ name ->
-                if(name == "bundle.properties") return
-                output += name.substring("bundle".length() + 1, name.lastIndexOf('.')) + "\n"
-            }
-            new File(project(':core').projectDir, 'assets/locales').text = output
-            new File(project(':core').projectDir, 'assets/basepartnames').text = new File(project(':core').projectDir, 'assets/baseparts/').list().sort().findAll{f -> f.endsWith(".msch")}.join("\n")
-        }
-
-        writeVersion = {
-            def pfile = new File(project(':core').projectDir, 'assets/version.properties')
-            def props = new Properties()
-
-            try{
-                pfile.createNewFile()
-            }catch(Exception ignored){
-            }
-
-            if(pfile.exists()){
-                props.load(new FileInputStream(pfile))
-
-                String buildid = getBuildVersion()
-                println("Compiling with build: '$buildid'")
-
-                props["type"] = versionType
-                props["number"] = versionNumber
-                props["modifier"] = versionModifier
-                props["build"] = buildid
-                props["buildDate"] = new SimpleDateFormat("MMMM d, yyyy HH:mm a", Locale.getDefault()).format(new Date())
-                props["commitHash"] = "unknown"
-                if(project.hasProperty("showCommitHash")){
-                    props["commitHash"] = getCommitHash()
-                }
-
-                props.store(pfile.newWriter(), "Autogenerated file. Do not modify.")
-            }
-        }
-
-        writeProcessors = {
-            new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
-            def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
-            def text = new StringBuilder()
-            def files = new File(rootDir, "annotations/src/main/java")
-            files.eachFileRecurse(groovy.io.FileType.FILES){ file ->
-                if(file.name.endsWith(".java") && (file.text.contains(" extends BaseProcessor") || (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")))){
-                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
-                }
-            }
-
-            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
-        }
-
-        writePlugins = {
-            new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
-            def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/com.sun.source.util.Plugin")
-            def text = new StringBuilder()
-            def files = new File(rootDir, "annotations/src/main/java")
-            files.eachFileRecurse(groovy.io.FileType.FILES){ file ->
-                if(file.name.endsWith(".java") && (file.text.contains(" implements Plugin"))){
-                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
-                }
-            }
-
-            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
-        }
     }
 
     repositories{
@@ -186,49 +50,29 @@ allprojects{
         maven{ url 'https://jitpack.io' }
     }
 
-    task clearCache{
-        doFirst{
-            delete{
-                delete "$rootDir/core/assets/cache"
+    tasks.withType(JavaCompile).configureEach{
+        if(project.name == "annotations"){
+            sourceCompatibility = 8
+            targetCompatibility = 8
+            options.setFork(true)
+        }else{
+            sourceCompatibility = JavaVersion.VERSION_17
+            targetCompatibility = JavaVersion.VERSION_17
+            if(project.name != "android" && project.name != "tools"){
+                targetCompatibility = 8
+                options.release = 8
             }
+            if(project.name == "core")
+                options.setFork(true)
         }
-    }
-
-    tasks.withType(JavaCompile){
-        targetCompatibility = 8
-        sourceCompatibility = JavaVersion.VERSION_17
         options.encoding = "UTF-8"
         options.compilerArgs += ["-Xlint:deprecation"]
-        dependsOn clearCache
-
-        options.forkOptions.jvmArgs += [
-            '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
-            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
-            '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
-            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
-            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
-            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
-            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
-            '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
-        ]
-    }
-}
-
-configure(project(":annotations")){
-    tasks.withType(JavaCompile){
-        targetCompatibility = 8
-        sourceCompatibility = 8
-        options.fork = true
     }
 }
 
 //compile with java 8 compatibility for everything except the annotation project
 configure(subprojects - project(":annotations")){
-    tasks.withType(JavaCompile){
-        options.compilerArgs.addAll(['--release', '8'])
-    }
-
-    tasks.withType(Javadoc){
+    tasks.withType(Javadoc).configureEach{
         options{
             addStringOption('Xdoclint:none', '-quiet')
             addStringOption('-release', '17')
@@ -237,11 +81,10 @@ configure(subprojects - project(":annotations")){
     }
 }
 
+if(findProject("desktop") != null)
 project(":desktop"){
     apply plugin: "java"
 
-    compileJava.options.fork = true
-
     dependencies{
         implementation project(":core")
         implementation arcModule("extensions:profiling")
@@ -250,8 +93,6 @@ project(":desktop"){
         implementation arcModule("natives:natives-desktop")
         implementation arcModule("natives:natives-freetype-desktop")
 
-        if(debugged()) implementation project(":debug")
-
         implementation "com.github.Anuken:steamworks4j:$steamworksVersion"
 
         implementation arcModule("backends:backend-sdl")
@@ -271,17 +112,7 @@ project(":core"){
         }
     }
 
-    compileJava.options.fork = true
-
-    task preGen{
-        outputs.upToDateWhen{ false }
-        generateLocales()
-        writeVersion()
-        writeProcessors()
-        writePlugins()
-    }
-
-    task copyChangelog{
+    tasks.register('copyChangelog'){
         doLast{
             def props = loadVersionProps()
             def androidVersion = props['androidBuildCode'].toInteger() - 2
@@ -289,9 +120,9 @@ project(":core"){
             def notice = "[This is a truncated changelog, see Github for full notes]"
             def maxLength = 460
 
-            def androidLogList = [notice] + loglines.findAll{ line -> !line.endsWith("]") || line.endsWith("[Mobile]") || line.endsWith("[Android]")}
+            def androidLogList = [notice] + loglines.findAll{ line -> !line.endsWith("]") || line.endsWith("[Mobile]") || line.endsWith("[Android]") }
             def result = ""
-            androidLogList.forEach{line ->
+            androidLogList.forEach{ line ->
                 if(result.length() + line.length() + 1 < maxLength){
                     result += line + "\n"
                 }
@@ -305,19 +136,7 @@ project(":core"){
         }
     }
 
-    task sourcesJar(type: Jar, dependsOn: classes){
-        archiveClassifier = 'sources'
-        from sourceSets.main.allSource
-    }
-
-    task assetsJar(type: Jar, dependsOn: ":tools:pack"){
-        archiveClassifier = 'assets'
-        from files("assets"){
-            exclude "config", "cache", "music", "sounds", "sprites/fallback"
-        }
-    }
-
-    task musicJar(type: Jar){
+    tasks.register('musicJar', Jar){
         archiveClassifier = 'music'
         from files("assets"){
             include "music/*", "sounds/*"
@@ -325,8 +144,6 @@ project(":core"){
     }
 
     dependencies{
-        compileJava.dependsOn(preGen)
-
         api "org.lz4:lz4-java:1.8.0"
         api arcModule("arc-core")
         api arcModule("extensions:flabel")
@@ -336,33 +153,33 @@ project(":core"){
         api arcModule("extensions:arcnet")
         implementation arcModule("extensions:filedialogs")
         api "com.github.Anuken:rhino:$rhinoVersion"
-        if(localArc && debugged()) api arcModule("extensions:recorder")
-        if(localArc) api arcModule(":extensions:packer")
 
-        annotationProcessor 'com.github.Anuken:jabel:0.9.0'
+//        compileOnly 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'
+        annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'
+//        annotationProcessor 'com.github.Anuken:jabel:0.9.0'
         compileOnly project(":annotations")
         if(!project.hasProperty("noKapt")) kapt project(":annotations")
     }
 
     afterEvaluate{
-        task mergedJavadoc(type: Javadoc){
-            def blacklist = [project(":ios"), project(":desktop"), project(":server"), project(":annotations")]
-            if(findProject(":android") != null){
-                blacklist += project(":android")
+        tasks.register("mergedJavadoc", Javadoc){
+            def blacklist = [project(":server"), project(":annotations"), findProject(":ios"), findProject(":desktop"), findProject(":android")]
+
+            source = provider{
+                return rootProject.subprojects.collect{ project ->
+                    if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
+                        return project.sourceSets.main.allJava
+                    }
+                }.findAll{ it != null }
             }
-
-            source rootProject.subprojects.collect{ project ->
-                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
-                    return project.sourceSets.main.allJava
-                }
+            classpath = provider{
+                return rootProject.subprojects.collect{ project ->
+                    if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
+                        return project.sourceSets.main.compileClasspath
+                    }
+                }.findAll{ it != null }
             }
-
-            classpath = files(rootProject.subprojects.collect { project ->
-                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
-                    return project.sourceSets.main.compileClasspath
-                }
-            })
-            destinationDir = new File(buildDir, 'javadoc')
+            destinationDir = layout.buildDirectory.dir('javadoc')
         }
     }
 
@@ -416,14 +233,19 @@ project(":tools"){
     apply plugin: "java"
 
     dependencies{
-        implementation project(":core")
+        //MDTX: use upstream build for tools, avoid classpath change
+        implementation("com.github.Anuken.Mindustry:core:${property("upstreamBuild")}"){
+            transitive = false
+        }
+        implementation arcModule("arc-core")
+        implementation arcModule(":extensions:g3d")
+        implementation arcModule(":extensions:packer")
 
         implementation arcModule("natives:natives-desktop")
         implementation arcModule("natives:natives-freetype-desktop")
         implementation arcModule("backends:backend-headless")
 
         implementation("com.google.guava:guava:33.3.1-jre")
-        annotationProcessor 'com.github.Anuken:jabel:0.9.0'
     }
 }
 
@@ -446,42 +268,16 @@ configure([":core", ":server"].collect{project(it)}){
         publications{
             maven(MavenPublication){
                 from components.java
-                if(project.name == "core"){
-                    artifact(tasks.named("assetsJar"))
-                }
             }
         }
     }
 }
 
-task deployAll{
-    task cleanDeployOutput{
-        doFirst{
-            if(getBuildVersion() == "custom build" || getBuildVersion() == "") throw new IllegalArgumentException("----\n\nSET A BUILD NUMBER FIRST!\n\n----")
-            if(!project.hasProperty("release")) throw new IllegalArgumentException("----\n\nSET THE RELEASE PROJECT PROPERTY FIRST!\n\n----")
-
-            delete{
-                delete "deploy/"
-            }
-        }
-    }
-
-    dependsOn cleanDeployOutput
-    dependsOn "desktop:packrLinux64"
-    dependsOn "desktop:packrWindows64"
-    dependsOn "desktop:packrWindows32"
-    dependsOn "desktop:packrMacOS"
-    if(versionModifier != "steam"){
-        dependsOn "server:deploy"
-        dependsOn "android:deploy"
-    }
-}
-
-task resolveDependencies{
+tasks.register('resolveDependencies'){
     doLast{
         rootProject.allprojects{ project ->
             Set<Configuration> configurations = project.buildscript.configurations + project.configurations
-            configurations.findAll{c -> c.canBeResolved}.forEach{c -> c.resolve()}
+            configurations.findAll{ c -> c.canBeResolved }.forEach{ c -> c.resolve() }
         }
     }
 }
diff --git a/core/build.gradle b/core/build.gradle
deleted file mode 100644
index f7f291ef1ab71577313759a7e9fdfd3c1e0833dc..0000000000000000000000000000000000000000
--- a/core/build.gradle
+++ /dev/null
@@ -1,2 +0,0 @@
-sourceSets.main.java.srcDirs = ["src/", "$buildDir/generated/sources/annotationProcessor/java/main"]
-sourceSets.main.kotlin.srcDirs = ["src/"]
\ No newline at end of file
diff --git a/core/build.gradle.kts b/core/build.gradle.kts
new file mode 100644
index 0000000000000000000000000000000000000000..988cebaf5948bff23a01a6bdca87f99d4012ef9c
--- /dev/null
+++ b/core/build.gradle.kts
@@ -0,0 +1,66 @@
+import org.gradle.jvm.tasks.Jar
+import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
+
+plugins {
+    java
+    kotlin("jvm")
+}
+sourceSets.main {
+    java.setSrcDirs(listOf("src/", "../../src/", layout.buildDirectory.dir("/generated/sources/annotationProcessor/java/main")))
+    kotlin.setSrcDirs(listOf("src/", "../../src/"))
+}
+
+tasks {
+    withType<KotlinCompile>().configureEach {
+        kotlinOptions {
+            jvmTarget = "1.8"
+        }
+    }
+
+    val generateLocales by registering {
+        outputs.cacheIf { true }
+        val outFile = projectDir.resolve("assets/locales")
+        outputs.file(outFile).withPropertyName("outFile")
+        val bundles = listOf("en") + projectDir.resolve("assets/bundles/").list()!!
+            .filter { it.startsWith("bundle_") }
+            .map { it.substring("bundle_".length, it.lastIndexOf('.')) }
+            .sorted()
+        inputs.property("bundles", bundles.toTypedArray())
+        doLast {
+            outFile.writeText(bundles.joinToString("\n"))
+        }
+    }
+    val generateBasePartNames by registering {
+        outputs.cacheIf { true }
+        val outFile = projectDir.resolve("assets/basepartnames")
+        outputs.file(outFile)
+        val baseParts = projectDir.resolve("assets/baseparts/").list()!!.sorted()
+        inputs.property("baseParts", baseParts.toTypedArray())
+        doLast {
+            outFile.writeText(baseParts.joinToString("\n"))
+        }
+    }
+    val writeVersion by registering(WriteProperties::class) {
+        destinationFile.set(projectDir.resolve("assets/version.properties"))
+        comment = "Autogenerated file. Do not modify."
+        property("type", findProperty("versionType") ?: "official")
+        property("modifier", findProperty("versionModifier") ?: "release")
+        property("number", '7')
+        property("build", findProperty("buildversion") ?: "custom build")
+        property("commitHash", "unknown") //TODO commitHash
+    }
+    processResources.configure {
+        dependsOn(generateLocales, generateBasePartNames, writeVersion)
+    }
+
+    val allAssets by registering {
+        dependsOn(processResources, ":tools:pack")
+        outputs.dir("assets")
+        outputs.dir("../../assets")
+    }
+    val assetsJar by registering(Jar::class) {
+        from(allAssets) {
+            exclude("config", "cache", "music", "sounds")
+        }
+    }
+}
\ No newline at end of file
diff --git a/desktop/build.gradle b/desktop/build.gradle
index b3f192bc75d3c1775179a7252c02f7ce0a39ff7e..b47e0569d82a8cc6331a1fe36952c206e3660901 100644
--- a/desktop/build.gradle
+++ b/desktop/build.gradle
@@ -3,14 +3,9 @@ sourceSets.main.java.srcDirs = ["src/"]
 project.ext.mainClassName = "mindustry.desktop.DesktopLauncher"
 project.ext.assetsDir = new File("../core/assets")
 
-def enableTemplates = true
-def JDK_DIR = "$System.env.JDK_DIR"
-def ICON_DIR = new File("$rootDir/core/assets/icons/icon.icns")
-def platforms = ["Linux64", "Windows64", "Windows32", "MacOS"]
-
-task run(dependsOn: classes, type: JavaExec){
+task run(dependsOn: [classes, ":core:allAssets"], type: JavaExec){
     mainClass = project.mainClassName
-    classpath = sourceSets.main.runtimeClasspath
+    classpath = files(sourceSets.main.runtimeClasspath, tasks.getByPath(":core:allAssets"))
     standardInput = System.in
     workingDir = project.assetsDir
     ignoreExitValue = true
@@ -44,7 +39,7 @@ task dist(type: Jar, dependsOn: configurations.runtimeClasspath){
     from files(sourceSets.main.output.classesDirs)
     from files(sourceSets.main.output.resourcesDir)
     from {configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }}
-    from files(project.assetsDir)
+    from(files(tasks.getByPath(":core:allAssets")))
     exclude("config/**")
     duplicatesStrategy = DuplicatesStrategy.EXCLUDE
 
@@ -58,157 +53,4 @@ task dist(type: Jar, dependsOn: configurations.runtimeClasspath){
     manifest{
         attributes 'Main-Class': project.mainClassName
     }
-}
-
-if(!project.ext.hasSprites() && System.getenv("JITPACK") != "true"){
-    println "Scheduling sprite packing."
-    run.dependsOn ":tools:pack"
-    dist.dependsOn ":tools:pack"
-}
-
-//this is only for local testing
-//add -Prelease -PversionModifier=steam as build properties
-task steamtest(dependsOn: dist){
-    doLast{
-        copy{
-            from "build/libs/Mindustry.jar"
-            if(project.hasProperty("destination")){
-                into project.property("destination")
-            }else if(System.properties["os.name"].contains("Mac")){
-                into "/Users/anuke/Library/Application Support/Steam/steamapps/common/Mindustry/Mindustry.app/Contents/Resources"
-            }else{
-                into "/home/anuke/.steam/steam/steamapps/common/Mindustry/jre"
-            }
-            rename("Mindustry.jar", "desktop.jar")
-        }
-    }
-}
-
-//required templates:
-//- Windows32: Not provided by Packr! This uses Java 8
-//required JDKs:
-//- Windows64
-//- Linux64
-//- Mac
-platforms.each{ platform ->
-    task "packr${platform.toString()}"{
-        dependsOn dist
-
-        doLast{
-            copy{
-                into "build/packr/"
-                rename("${appName}.jar", "desktop.jar")
-                from "build/libs/${appName}.jar"
-            }
-
-            delete{
-                delete "build/packr/output/"
-            }
-
-            //the Windows32 version uses an old java-8 based template, because packr and jpackage don't support win32
-            if(enableTemplates && (platform == "Windows32")){
-                copy{
-                    into "build/packr/output"
-                    from "${JDK_DIR}/templates/${platform.toString().toLowerCase()}"
-                }
-
-                copy{
-                    into "build/packr/output/jre"
-                    rename("${appName}.jar", "desktop.jar")
-                    from "build/libs/${appName}.jar"
-                }
-            }else{
-                def jarPath = JDK_DIR + "packr.jar"
-                def args = new String[]{"java", "-jar", jarPath}
-
-                args += new String[]{
-                        "--platform", platform == "MacOS" ? "Mac" : platform.toString(),
-                        "--jdk", JDK_DIR + "jre-${platform.toString().toLowerCase()}",
-                        "--executable", appName,
-                        "--classpath", "$rootDir/desktop/build/packr/desktop.jar".toString(),
-                        "--mainclass", project.ext.mainClassName,
-                        "--verbose",
-                        "--bundle", getPackage() + ".mac",
-                        "--icon", ICON_DIR,
-                        "--output", "$rootDir/desktop/build/packr/output".toString(),
-                        "--removelibs", "$rootDir/desktop/build/packr/desktop.jar".toString()
-                }
-
-                args += "--vmargs"
-
-                if(platform == "MacOS"){
-                    args += "XstartOnFirstThread"
-                }
-
-                args += "Dhttps.protocols=TLSv1.2,TLSv1.1,TLSv1"
-                args += "XX:+ShowCodeDetailsInExceptionMessages"
-
-                exec{
-                    commandLine args.toList()
-                    standardOutput = System.out
-                }
-
-                if(platform != "MacOS"){
-                    copy{
-                        into "build/packr/output/jre/"
-                        from "build/packr/output/desktop.jar"
-                    }
-
-                    delete{
-                        delete "build/packr/output/desktop.jar"
-                    }
-
-                    file("build/packr/output/Mindustry.json").text = file("build/packr/output/Mindustry.json").text.replace("desktop.jar", "jre/desktop.jar")
-                }else{
-                    copy{
-                        into "build/packr/output/${appName}.app/Contents/"
-                        from "build/packr/output/Contents/"
-                    }
-
-                    delete{
-                        delete "build/packr/output/Contents/"
-                    }
-                }
-            }
-
-            if((platform == "Windows64" || platform == "Windows32")){
-                copy{
-                    from "build/packr/output/jre/bin/msvcr100.dll"
-                    into "build/packr/output/"
-                    rename("msvcr100.dll", "MSVCR100.dll")
-                }
-            }
-
-            if(versionModifier.contains("steam")){
-                copy{
-                    def lib = platform == "MacOS" || platform == "Linux64" ? "lib" : ""
-                    from zipTree(platform == "MacOS" ? "build/packr/output/${appName}.app/Contents/Resources/desktop.jar" : "build/packr/output/jre/desktop.jar").matching{
-                        include "${lib}steamworks4j${platform == "Windows64" ? '64.dll' : platform == "Windows32" ? '.dll' : platform == "Linux64" ? '.so' : '.dylib'}"
-                        include "${lib}steam_api${platform == "Windows64" ? '64.dll' : platform == "Windows32" ? '.dll' : platform == "Linux64" ? '.so' : '.dylib'}"
-                    }
-                    into platform != "MacOS" ? "build/packr/output/" : "build/packr/output/${appName}.app/Contents/Resources"
-                }
-            }
-
-            copy{
-                from "build/packr/output"
-                into "../deploy/${platform.toString()}"
-            }
-        }
-
-        task "zip${platform.toString()}"(type: Zip){
-            from "build/packr/output"
-            archiveFileName = "${generateDeployName(platform.toString())}.zip"
-            destinationDirectory = (file("../deploy"))
-
-            doLast{
-                delete{
-                    delete "build/packr/"
-                }
-            }
-        }
-
-        finalizedBy "zip${platform.toString()}"
-
-    }
-}
+}
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 3d0287e2d7f10fabca1e0530a8b4978ac6632947..312429ff8b3a185a4d2a1a90dcf355e828dc9b39 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 org.gradle.daemon=true
-org.gradle.jvmargs=-Xms256m -Xmx1024m --illegal-access=permit \
+org.gradle.jvmargs=-Xms256m -Xmx2g --illegal-access=permit \
 --add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
 --add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
 --add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED \
@@ -26,4 +26,7 @@ org.gradle.caching=true
 org.gradle.internal.http.socketTimeout=100000
 org.gradle.internal.http.connectionTimeout=100000
 android.enableR8.fullMode=false
-archash=8d3f84b3c5
+
+#MDTX: Use "v{upstreamBuild}" by default
+#archash=8d3f84b3c5
+upstreamBuild=152.2
diff --git a/gradlew b/gradlew
index 4f906e0c811fc9e230eb44819f509cd0627f2600..f3b75f3b0d4faeb4b1c8a02b5c47007e6efb7dcd 100755
--- a/gradlew
+++ b/gradlew
@@ -1,7 +1,7 @@
-#!/usr/bin/env sh
+#!/bin/sh
 
 #
-# Copyright 2015 the original author or authors.
+# Copyright © 2015-2021 the original authors.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -15,69 +15,103 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #
+# SPDX-License-Identifier: Apache-2.0
+#
 
 ##############################################################################
-##
-##  Gradle start up script for UN*X
-##
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
 ##############################################################################
 
 # Attempt to set APP_HOME
+
 # Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
 done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
 
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
+APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
+MAX_FD=maximum
 
 warn () {
     echo "$*"
-}
+} >&2
 
 die () {
     echo
     echo "$*"
     echo
     exit 1
-}
+} >&2
 
 # OS specific support (must be 'true' or 'false').
 cygwin=false
 msys=false
 darwin=false
 nonstop=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
 esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
@@ -87,9 +121,9 @@ CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 if [ -n "$JAVA_HOME" ] ; then
     if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
         # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
+        JAVACMD=$JAVA_HOME/jre/sh/java
     else
-        JAVACMD="$JAVA_HOME/bin/java"
+        JAVACMD=$JAVA_HOME/bin/java
     fi
     if [ ! -x "$JAVACMD" ] ; then
         die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
@@ -98,88 +132,120 @@ Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation."
     fi
 else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+    JAVACMD=java
+    if ! command -v java >/dev/null 2>&1
+    then
+        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
 
 Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation."
+    fi
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
 fi
 
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
 
 # For Cygwin or MSYS, switch paths to Windows format before running java
-if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    JAVACMD=`cygpath --unix "$JAVACMD"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
     # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
         fi
-        i=`expr $i + 1`
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
     done
-    case $i in
-        0) set -- ;;
-        1) set -- "$args0" ;;
-        2) set -- "$args0" "$args1" ;;
-        3) set -- "$args0" "$args1" "$args2" ;;
-        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
 fi
 
-# Escape application args
-save () {
-    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
-    echo " "
-}
-APP_ARGS=`save "$@"`
 
-# Collect all arguments for the java command, following the shell quoting and substitution rules
-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Collect all arguments for the java command:
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
+#     and any embedded shellness will be escaped.
+#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
+#     treated as '${Hostname}' itself on the command line.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Stop when "xargs" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die "xargs is not available"
+fi
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
 
 exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index 107acd32c4e687021ef32db511e8a206129b88ec..9d21a21834d5195c278ba17baec3115b2aaab06e 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -13,8 +13,10 @@
 @rem See the License for the specific language governing permissions and
 @rem limitations under the License.
 @rem
+@rem SPDX-License-Identifier: Apache-2.0
+@rem
 
-@if "%DEBUG%" == "" @echo off
+@if "%DEBUG%"=="" @echo off
 @rem ##########################################################################
 @rem
 @rem  Gradle startup script for Windows
@@ -25,7 +27,8 @@
 if "%OS%"=="Windows_NT" setlocal
 
 set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
+if "%DIRNAME%"=="" set DIRNAME=.
+@rem This is normally unused
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
@@ -40,13 +43,13 @@ if defined JAVA_HOME goto findJavaFromJavaHome
 
 set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto execute
+if %ERRORLEVEL% equ 0 goto execute
 
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
+echo. 1>&2
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
 
 goto fail
 
@@ -56,11 +59,11 @@ set JAVA_EXE=%JAVA_HOME%/bin/java.exe
 
 if exist "%JAVA_EXE%" goto execute
 
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
+echo. 1>&2
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
 
 goto fail
 
@@ -75,13 +78,15 @@ set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
 :end
 @rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
+if %ERRORLEVEL% equ 0 goto mainEnd
 
 :fail
 rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
 rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
 
 :mainEnd
 if "%OS%"=="Windows_NT" endlocal
diff --git a/ios/build.gradle b/ios/build.gradle
index 71fafd875bfa1397b6a58a1a5c34e9d8e5097df4..fc05725a5c30262b0061492c27b2b1deae577b55 100644
--- a/ios/build.gradle
+++ b/ios/build.gradle
@@ -77,7 +77,7 @@ task deploy{
 }
 
 //must pack before deployment, as iOS never has the latest sprites.
-copyAssets.dependsOn ":tools:pack"
+copyAssets.dependsOn ":core:allAssets"
 copyAssets.dependsOn copyNatives
 launchIPhoneSimulator.dependsOn build
 launchIPadSimulator.dependsOn build
diff --git a/server/build.gradle b/server/build.gradle
index 45b887b1a75559db50435bb23156523e30ce50ee..91a4a0f02776a87bee4323993c19ba5e7a7609b4 100644
--- a/server/build.gradle
+++ b/server/build.gradle
@@ -3,10 +3,6 @@ sourceSets.main.java.srcDirs = ["src/"]
 project.ext.mainClassName = "mindustry.server.ServerLauncher"
 project.ext.assetsDir = new File("../core/assets")
 
-ext.getServerFolder = {
-    return "../deploy/${appName}-server-${getVersionString()}"
-}
-
 task run(dependsOn: classes, type: JavaExec){
     mainClass = project.mainClassName
     classpath = sourceSets.main.runtimeClasspath
@@ -31,10 +27,11 @@ task debug(dependsOn: classes, type: JavaExec){
 }
 
 task dist(type: Jar, dependsOn: configurations.runtimeClasspath){
+    dependsOn classes
     from files(sourceSets.main.output.classesDirs)
     from files(sourceSets.main.output.resourcesDir)
     from {configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }}
-    from files(project.assetsDir)
+    from files(tasks.getByPath(":core:allAssets"))
     exclude("sprites/**")
     exclude("music/**")
     exclude("sounds/**")
@@ -54,40 +51,3 @@ task dist(type: Jar, dependsOn: configurations.runtimeClasspath){
         attributes 'Main-Class': project.mainClassName
     }
 }
-
-task dzip(type: Zip){
-    from getServerFolder()
-    archiveFileName = "${generateDeployName('server')}.zip"
-    destinationDirectory = file("../deploy/")
-
-    finalizedBy 'cleanup'
-}
-
-task cleanup{
-    doLast{
-        delete{
-            delete getServerFolder()
-        }
-    }
-}
-
-task deploy{
-    dependsOn "dist"
-
-    finalizedBy 'dzip'
-
-    doLast{
-        copy{
-            from "build/libs/server-release.jar"
-            into getServerFolder()
-            rename("server-release.jar", "server.jar")
-        }
-
-        copy{
-            from "server_template"
-            into getServerFolder()
-        }
-    }
-}
-
-dist.dependsOn classes
diff --git a/settings.gradle b/settings.gradle
index b18346f65206aa9ddce3857083b40ce0c4001f53..1f526ce26a1f12e125de9fe8887ae3557d831832 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,8 +1,17 @@
+pluginManagement {
+    repositories {
+        gradlePluginPortal()
+        google()
+    }
+}
+
 if(JavaVersion.current().ordinal() < JavaVersion.VERSION_17.ordinal()){
     throw new Exception("!!! YOU MUST USE JAVA 17 OR ABOVE TO COMPILE AND RUN MINDUSTRY !!! Read the README. Your version: ${System.properties["java.version"]}")
 }
 
-include 'desktop', 'core', 'server', 'ios', 'annotations', 'tools', 'tests'
+include 'core', 'server', 'annotations', 'tools', 'tests'
+include 'desktop'
+//include 'ios'
 
 def hasSdk = System.getenv("ANDROID_HOME") != null
 
diff --git a/tools/build.gradle b/tools/build.gradle
index 6701a24f5fb261ed6ff21fc80d049577002861e0..7bc43257dd2c02dbea281c1a207bd123a4218409 100644
--- a/tools/build.gradle
+++ b/tools/build.gradle
@@ -1,3 +1,13 @@
+buildscript{
+    repositories{
+        maven{ url 'https://jitpack.io' }
+    }
+    dependencies{
+        classpath arcModule(":extensions:packer")
+        classpath arcModule(":arc-core")
+    }
+}
+
 sourceSets.main.java.srcDirs = ["src/"]
 
 import arc.files.Fi
@@ -24,7 +34,7 @@ def genFolder = "../core/assets-raw/sprites_out/generated/"
 def enableAA = true
 
 @groovy.transform.CompileStatic
-static int getRGB(Pixmap image, int ix, int iy) {
+static int getRGB(Pixmap image, int ix, int iy){
     return image.getRaw(Math.max(Math.min(ix, image.width - 1), 0), Math.max(Math.min(iy, image.height - 1), 0))
 }
 
@@ -72,7 +82,7 @@ static void antialias(File file){
                 suma.a(suma.a + color.a)
             }
 
-            float fm = suma.a <= 0.001f ? 0f : (float)(1f / suma.a)
+            float fm = suma.a <= 0.001f ? 0f : (float) (1f / suma.a)
             suma.mul(fm, fm, fm, fm)
 
             float total = 0
@@ -89,7 +99,7 @@ static void antialias(File file){
                 total += 1f
             }
 
-            fm = (float)(1f / total)
+            fm = (float) (1f / total)
             sum.mul(fm, fm, fm, fm)
             out.setRaw(x, y, sum.rgba8888())
             sum.set(0)
@@ -102,7 +112,7 @@ static void antialias(File file){
     new Fi(file).writePng(out)
 }
 
-task antialiasImages(){
+tasks.register('antialiasImages'){
     doLast{
         for(def img : project.getProperty("images").split(",")){
             println(project.getProperty("startdir") + "/" + img)
@@ -111,7 +121,7 @@ task antialiasImages(){
     }
 }
 
-task tileImages(){
+tasks.register('tileImages'){
     doLast{
         for(def img : project.getProperty("images").split(",")){
             println(project.getProperty("startdir") + "/" + img)
@@ -120,9 +130,12 @@ task tileImages(){
     }
 }
 
-task pack(dependsOn: [classes, configurations.runtimeClasspath]){
-
-    doLast{
+tasks.register('doPack', JavaExec){
+    outputs.cacheIf{ true }
+    dependsOn(classes)
+    inputs.dir("../core/assets-raw/sprites/")
+    outputs.dir("../core/assets-raw/packed")
+    doFirst{
         //cleanup old sprites
         delete{
             delete "../core/assets-raw/sprites_out/"
@@ -133,23 +146,18 @@ task pack(dependsOn: [classes, configurations.runtimeClasspath]){
             from "../core/assets-raw/sprites/"
             into "../core/assets-raw/sprites_out/"
         }
-
         //run generation task; generate all needed sprites
         file(genFolder).mkdirs()
-        javaexec{
-            main = "mindustry.tools.ImagePacker"
-            classpath = sourceSets.main.runtimeClasspath
-            workingDir = genFolder
-        }
-
+    }
+    mainClass = "mindustry.tools.ImagePacker"
+    classpath = sourceSets.main.runtimeClasspath
+    workingDir = genFolder
+    doLast{
         copy{
             from "../core/assets-raw/sprites_out/ui/icons"
             into "../core/assets-raw/sprites_out/ui/"
         }
-
-        delete{
-            delete "../core/assets-raw/sprites_out/ui/icons"
-        }
+        delete("../core/assets-raw/sprites_out/ui/icons")
 
         if(enableAA){
             ExecutorService executor = Executors.newFixedThreadPool(OS.cores)
@@ -172,23 +180,27 @@ task pack(dependsOn: [classes, configurations.runtimeClasspath]){
         println("\n\nPacking normal 4096 sprites...\n\n")
 
         //pack normal sprites
-        TexturePacker.process(new File(rootDir, "core/assets-raw/sprites_out/").absolutePath, new File(rootDir, "core/assets/sprites/").absolutePath, "sprites.aatls")
-
-        println("\n\nPacking fallback 2048 sprites...\n\n")
-
-        //replace config file contents
-        fileTree(dir: '../core/assets-raw/sprites_out/', include: "**/*.json").visit{ file ->
-            if(!file.isDirectory()) file.file.text = file.file.text.replace("4096", "2048")
-        }
+        TexturePacker.process(new File(rootDir, "core/assets-raw/sprites_out/").absolutePath, new File(rootDir, "core/assets-raw/packed").absolutePath, "sprites.aatls")
 
         //pack fallback 2048x2048 sprites - disabled when debugging
         if(!project.hasProperty("args")){
-            TexturePacker.process(new File(rootDir, "core/assets-raw/sprites_out/").absolutePath, new File(rootDir, "core/assets/sprites/fallback/").absolutePath, "sprites.aatls")
+            println("\n\nPacking fallback 2048 sprites...\n\n")
+
+            //replace config file contents
+            fileTree(dir: '../core/assets-raw/sprites_out/', include: "**/*.json").visit{ file ->
+                if(!file.isDirectory()) file.file.text = file.file.text.replace("4096", "2048")
+            }
+            TexturePacker.process(new File(rootDir, "core/assets-raw/sprites_out/").absolutePath, new File(rootDir, "core/assets-raw/packed/fallback/").absolutePath, "sprites.aatls")
         }
     }
 }
+tasks.register('pack', Copy){
+    destinationDir(new File(rootDir, "core/assets/sprites/"))
+    from(files(doPack))
+}
 
-task genSprites(dependsOn: classes, type: JavaExec){
+tasks.register('genSprites', JavaExec){
+    dependsOn classes
     finalizedBy 'antialiasGen'
 
     mainClass = "mindustry.tools.ImagePacker"
@@ -197,7 +209,8 @@ task genSprites(dependsOn: classes, type: JavaExec){
     workingDir = genFolder
 }
 
-task fontgen(dependsOn: classes, type: JavaExec){
+tasks.register('fontgen', JavaExec){
+    dependsOn classes
     /* icon font pipeline:
      1. take set of pre-defined icons and SVGs
      2. use Fontello API to get a font with these
@@ -232,30 +245,32 @@ task fontgen(dependsOn: classes, type: JavaExec){
         //TODO this is broken
 
         Log.info(OS.exec("fontforge", "-script",
-            Fi.get("core/assets-raw/fontgen/merge.pe").absolutePath(),
-            Fi.get("core/assets/fonts/font.woff").absolutePath(),
-            Fi.get("core/assets-raw/fontgen/out/font.woff").absolutePath())
+                Fi.get("core/assets-raw/fontgen/merge.pe").absolutePath(),
+                Fi.get("core/assets/fonts/font.woff").absolutePath(),
+                Fi.get("core/assets-raw/fontgen/out/font.woff").absolutePath())
         )
 
         Log.info("Done.")
     }
 }
 
-task icongen(dependsOn: classes, type: JavaExec){
+tasks.register('icongen', JavaExec){
+    dependsOn classes
     mainClass = "mindustry.tools.IconConverter"
     classpath = sourceSets.main.runtimeClasspath
     standardInput = System.in
     workingDir = "../core/assets-raw"
 }
 
-task updateScripts(dependsOn: classes, type: JavaExec){
+tasks.register('updateScripts', JavaExec){
+    dependsOn classes
     mainClass = "mindustry.tools.ScriptMainGenerator"
     classpath = sourceSets.main.runtimeClasspath
     standardInput = System.in
     workingDir = "../"
 }
 
-task updateBundles{
+tasks.register('updateBundles'){
     doLast{
         def uniEscape = { String string ->
             StringBuilder outBuffer = new StringBuilder()
@@ -263,12 +278,12 @@ task updateBundles{
             for(int i = 0; i < len; i++){
                 char ch = string.charAt(i)
                 if((ch > 61) && (ch < 127)){
-                    outBuffer.append(ch == (char)'\\' ? "\\\\" : ch)
+                    outBuffer.append(ch == (char) '\\' ? "\\\\" : ch)
                     continue
                 }
 
                 if(ch >= 0xE000 && ch <= 0xF8FF){
-                    String hex = Integer.toHexString((int)ch)
+                    String hex = Integer.toHexString((int) ch)
                     outBuffer.append("\\u")
                     for(int j = 0; j < 4 - hex.length(); j++){
                         outBuffer.append('0')
diff --git a/tools/src/mindustry/tools/Generators.java b/tools/src/mindustry/tools/Generators.java
index fbd79b58a3f6f63bc3d42b5e6a07b80fdfff1df7..a137994e81e658d9795ddcbcee52aacb10d7aabc 100644
--- a/tools/src/mindustry/tools/Generators.java
+++ b/tools/src/mindustry/tools/Generators.java
@@ -448,7 +448,7 @@ public class Generators{
                 }
             }
 
-            save(colors, "../../../assets/sprites/block_colors");
+            save(colors, "../../packed/block_colors");
         });
 
         generate("shallows", () -> {
