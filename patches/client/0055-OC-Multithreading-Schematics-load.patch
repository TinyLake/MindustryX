From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Thu, 25 Jul 2024 13:12:37 +0800
Subject: [PATCH] OC: Multithreading Schematics load

Inspired by FOO client.
---
 core/src/mindustry/game/Schematics.java | 27 ++++++++++++++++++-------
 1 file changed, 20 insertions(+), 7 deletions(-)

diff --git a/core/src/mindustry/game/Schematics.java b/core/src/mindustry/game/Schematics.java
index 35843db3e559cc691d987aab8bd345c52dc04538..dc88a0313bb3ee0fb7c0ddd64a7069ee0aa1dd3b 100644
--- a/core/src/mindustry/game/Schematics.java
+++ b/core/src/mindustry/game/Schematics.java
@@ -37,6 +37,7 @@ import mindustry.world.meta.*;
 import mindustryX.features.*;
 
 import java.io.*;
+import java.util.concurrent.*;
 import java.util.zip.*;
 
 import static mindustry.Vars.*;
@@ -81,20 +82,34 @@ public class Schematics implements Loadable{
 
         loadLoadouts();
 
+        //MDTX: multithreading schematics load, inspired by FOO
+        var await = new Seq<Future<Schematic>>();
         for(Fi file : schematicDirectory.list()){
-            loadFile(file);
+            await.add(mainExecutor.submit(() -> loadFile(file)));
         }
 
-        platform.getWorkshopContent(Schematic.class).each(this::loadFile);
+        platform.getWorkshopContent(Schematic.class).each(file -> await.add(mainExecutor.submit(() -> loadFile(file))));
 
         //mod-specific schematics, cannot be removed
-        mods.listFiles("schematics", (mod, file) -> {
+        mods.listFiles("schematics", (mod, file) -> await.add(mainExecutor.submit(() -> {
             Schematic s = loadFile(file);
             if(s != null){
                 s.mod = mod;
             }
-        });
+            return s;
+        })));
 
+        await.each((task) -> {
+            try{
+                Schematic s = task.get();
+                if(s == null) return;
+                all.add(s);
+                checkLoadout(s, true);
+            }catch(Exception e){
+                throw new RuntimeException(e);
+            }
+        });
+        await.each(Threads::await);
         all.sort();
 
         if(shadowBuffer == null){
@@ -139,8 +154,6 @@ public class Schematics implements Loadable{
 
         try{
             Schematic s = read(file);
-            all.add(s);
-            checkLoadout(s, true);
 
             //external file from workshop
             if(!s.file.parent().equals(schematicDirectory)){
@@ -602,7 +615,7 @@ public class Schematics implements Loadable{
             for(int i = 0; i < total; i++){
                 Block block = blocks.get(stream.readByte());
                 int position = stream.readInt();
-                Object config = ver == 0 ? mapConfig(block, stream.readInt(), position) : TypeIO.readObject(Reads.get(stream));
+                Object config = ver == 0 ? mapConfig(block, stream.readInt(), position) : TypeIO.readObject(new Reads(stream));
                 byte rotation = stream.readByte();
                 if(block != Blocks.air){
                     tiles.add(new Stile(block, Point2.x(position), Point2.y(position), config, rotation));
