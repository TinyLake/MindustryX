From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Fri, 29 Nov 2024 20:16:58 +0800
Subject: [PATCH] =?UTF-8?q?HC:=20v146=20protocol&contents=20compatible=20m?=
 =?UTF-8?q?ode=20(=E5=85=81=E8=AE=B8=E8=B7=A8=E7=89=88=E6=9C=AC=E5=8A=A0?=
 =?UTF-8?q?=E5=85=A5v146=E6=9C=8D=E5=8A=A1=E5=99=A8)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 core/src/mindustry/core/ContentLoader.java | 17 ++++++++++
 core/src/mindustry/core/NetClient.java     |  2 ++
 core/src/mindustry/io/TypeIO.java          | 12 +++++--
 core/src/mindustry/net/Net.java            | 39 +++++++++++++++++++---
 core/src/mindustry/net/NetworkIO.java      | 13 +++++++-
 core/src/mindustry/net/Packets.java        |  2 +-
 6 files changed, 77 insertions(+), 8 deletions(-)

diff --git a/core/src/mindustry/core/ContentLoader.java b/core/src/mindustry/core/ContentLoader.java
index 1ef48b5018109fbf1ab14475c93ad4867a7fffbf..1b6076ffaa5b184f0743e421b2f013bd04d0a9ee 100644
--- a/core/src/mindustry/core/ContentLoader.java
+++ b/core/src/mindustry/core/ContentLoader.java
@@ -33,6 +33,8 @@ public class ContentLoader{
     private @Nullable Content lastAdded;
     private ObjectSet<Cons<Content>> initialization = new ObjectSet<>();
 
+    private ObjectIntMap<MappableContent> temporaryMapperR = new ObjectIntMap<>();
+
     public ContentLoader(){
         for(ContentType type : ContentType.all){
             contentMap[type.ordinal()] = new Seq<>();
@@ -194,6 +196,21 @@ public class ContentLoader{
 
     public void setTemporaryMapper(MappableContent[][] temporaryMapper){
         this.temporaryMapper = temporaryMapper;
+        var mapperR = temporaryMapperR;
+        mapperR.clear();
+        if(temporaryMapper == null) return;
+        for(var arr : temporaryMapper){
+            if(arr == null) continue;
+            for(int i = 0; i < arr.length; i++){
+                if(arr[i] == null) continue;
+                mapperR.put(arr[i], i);
+            }
+        }
+    }
+
+    @mindustryX.MindustryXApi
+    public int getTemporaryMapperId(MappableContent content){
+        return temporaryMapperR.get(content, 0);
     }
 
     /** @return the last registered content with the specified name. Note that the content loader makes no attempt to resolve name conflicts. This method can be unreliable. */
diff --git a/core/src/mindustry/core/NetClient.java b/core/src/mindustry/core/NetClient.java
index e80d5029613f62f112e4f2c8e1be25eeca91dd4e..3a55382ddd0f404bf97d7c25d99507ed2942ae01 100644
--- a/core/src/mindustry/core/NetClient.java
+++ b/core/src/mindustry/core/NetClient.java
@@ -520,6 +520,8 @@ public class NetClient implements ApplicationListener{
 
     @Remote(variants = Variant.both, priority = PacketPriority.low, unreliable = true)
     public static void blockSnapshot(short amount, byte[] data){
+        //MDTX: As `Block.id` and `Building.version()` is different, snapshot can't read correctly
+        if(LogicExt.v146Mode) return;
         try{
             netClient.byteStream.setBytes(data);
             DataInputStream input = netClient.dataStream;
diff --git a/core/src/mindustry/io/TypeIO.java b/core/src/mindustry/io/TypeIO.java
index c93d0921230fcbaacdd8cd673cf12fd4c313e823..bf922b62c173997e6d4d4e14b7533aaddcb97f22 100644
--- a/core/src/mindustry/io/TypeIO.java
+++ b/core/src/mindustry/io/TypeIO.java
@@ -26,6 +26,7 @@ import mindustry.type.*;
 import mindustry.world.*;
 import mindustry.world.blocks.*;
 import mindustry.world.blocks.payloads.*;
+import mindustryX.features.*;
 
 import java.io.*;
 import java.nio.*;
@@ -55,7 +56,10 @@ public class TypeIO{
         }else if(object instanceof Content map){
             write.b((byte)5);
             write.b((byte)map.getContentType().ordinal());
-            write.s(map.id);
+            if(LogicExt.contentsCompatibleMode && map instanceof Block b)
+                writeBlock(write, b);
+            else
+                write.s(map.id);
         }else if(object instanceof IntSeq arr){
             write.b((byte)6);
             write.s((short)arr.size);
@@ -390,6 +394,10 @@ public class TypeIO{
     }
 
     public static void writeBlock(Writes write, Block block){
+        if(LogicExt.contentsCompatibleMode){
+            write.s(content.getTemporaryMapperId(block));
+            return;
+        }
         write.s(block.id);
     }
 
@@ -452,7 +460,7 @@ public class TypeIO{
         write.b(plan.breaking ? (byte)1 : 0);
         write.i(Point2.pack(plan.x, plan.y));
         if(!plan.breaking){
-            write.s(plan.block.id);
+            writeBlock(write, plan.block);
             write.b((byte)plan.rotation);
             boolean writePlan = !headless || !net.server();
             write.b(writePlan ? 1 : 0); //always has config
diff --git a/core/src/mindustry/net/Net.java b/core/src/mindustry/net/Net.java
index 48c4d6749bd6f0776547fd633d7ac18c76af2452..d12c1a1d70f082fbdb54cb26ea8be0c5613dcdde 100644
--- a/core/src/mindustry/net/Net.java
+++ b/core/src/mindustry/net/Net.java
@@ -1,6 +1,7 @@
 package mindustry.net;
 
 import arc.*;
+import arc.files.*;
 import arc.func.*;
 import arc.net.*;
 import arc.net.Server.*;
@@ -17,9 +18,8 @@ import net.jpountz.lz4.*;
 import java.io.*;
 import java.nio.*;
 import java.nio.channels.*;
-import java.util.concurrent.*;
 
-import static arc.util.Log.*;
+import static arc.util.Log.debug;
 import static mindustry.Vars.*;
 
 @SuppressWarnings("unchecked")
@@ -27,6 +27,9 @@ public class Net{
     private static Seq<Prov<? extends Packet>> packetProvs = new Seq<>();
     private static Seq<Class<? extends Packet>> packetClasses = new Seq<>();
     private static ObjectIntMap<Class<?>> packetToId = new ObjectIntMap<>();
+    private static Seq<String> oldMappings = new Seq<>();
+    private static ObjectIntMap<String> oldPacketToId = new ObjectIntMap<>();
+    private static IntIntMap oldIdMappings = new IntIntMap();
 
     private boolean server;
     private boolean active;
@@ -48,6 +51,24 @@ public class Net{
 
         //register generated packet classes
         Call.registerPackets();
+
+        Fi fi = Core.files != null ? Core.files.internal("packetsV146.txt") : new Fi("packetsV146.txt", Files.FileType.internal);
+        oldMappings.addAll(fi.readString().replace("\r", "").split("\n"));
+        for(String name : oldMappings){
+            oldPacketToId.put(name, oldPacketToId.size);
+        }
+        for(Class<? extends Packet> packetClass : packetClasses){
+            var oldId = oldPacketToId.get(packetClass.getSimpleName(), -1);
+            if(oldId != -1){
+                oldIdMappings.put(oldId, packetToId.get(packetClass));
+            }else{
+                Log.warn("New packet type: " + packetClass.getSimpleName());
+            }
+        }
+        for(int i = 0; i < oldMappings.size; i++){
+            if(!oldIdMappings.containsKey(i))
+                Log.warn("Deleted packet: " + oldMappings.get(i));
+        }
     }
 
     /** Registers a new packet type for serialization. */
@@ -59,12 +80,16 @@ public class Net{
     }
 
     public static byte getPacketId(Packet packet){
-        int id = packetToId.get(packet.getClass(), -1);
+        int id = LogicExt.v146Mode ? oldPacketToId.get(packet.getClass().getSimpleName(), -1) : packetToId.get(packet.getClass(), -1);
         if(id == -1) throw new ArcRuntimeException("Unknown packet type: " + packet.getClass());
         return (byte)id;
     }
 
     public static <T extends Packet> T newPacket(byte id){
+        if(LogicExt.v146Mode){
+            int id2 = LogicExt.v146Mode ? oldIdMappings.get(id & 0xff, -1) : id & 0xff;
+            return ((Prov<T>)packetProvs.get(id2)).get();
+        }
         return ((Prov<T>)packetProvs.get(id & 0xff)).get();
     }
 
@@ -199,6 +224,7 @@ public class Net{
     }
 
     public void disconnect(){
+        content.setTemporaryMapper(null);
         if(active && !server){
             Log.info("Disconnecting.");
         }
@@ -268,7 +294,12 @@ public class Net{
      * Call to handle a packet being received for the client.
      */
     public void handleClientReceived(Packet object){
-        object.handled();
+        try{
+            object.handled();
+        }catch(RuntimeException e){
+            if(LogicExt.contentsCompatibleMode && e.getCause() instanceof EOFException){
+            }else throw e;
+        }
         ReplayController.onClientPacket(object);
 
         if(object instanceof StreamBegin b){
diff --git a/core/src/mindustry/net/NetworkIO.java b/core/src/mindustry/net/NetworkIO.java
index 89a5e536fe62ed8d3dc04e291fb705167a06ed89..2a9481ee3cea1da06888cf2f35a23f0ea618758a 100644
--- a/core/src/mindustry/net/NetworkIO.java
+++ b/core/src/mindustry/net/NetworkIO.java
@@ -4,6 +4,7 @@ import arc.*;
 import arc.util.*;
 import arc.util.io.*;
 import mindustry.*;
+import mindustry.content.*;
 import mindustry.core.*;
 import mindustry.ctype.*;
 import mindustry.game.*;
@@ -13,6 +14,7 @@ import mindustry.logic.*;
 import mindustry.maps.Map;
 import mindustry.net.Administration.*;
 import mindustry.type.*;
+import mindustryX.features.*;
 
 import java.io.*;
 import java.nio.*;
@@ -60,12 +62,19 @@ public class NetworkIO{
         }
     }
 
+    @SuppressWarnings("deprecation")
     public static void loadWorld(InputStream is){
 
         try(DataInputStream stream = new DataInputStream(is)){
             Time.clear();
             state.rules = JsonIO.read(Rules.class, stream.readUTF());
-            state.mapLocales = JsonIO.read(MapLocales.class, stream.readUTF());
+            if(LogicExt.v146Mode){
+                //noinspection deprecation
+                if(!state.rules.hiddenBuildItems.contains(Items.beryllium) && !state.rules.hiddenBuildItems.contains(Items.copper)){
+                    state.rules.planet = Planets.sun;
+                }
+            }
+            if(!LogicExt.v146Mode) state.mapLocales = JsonIO.read(MapLocales.class, stream.readUTF());
             state.map = new Map(SaveIO.getSaveWriter().readStringMap(stream));
 
             state.wave = stream.readInt();
@@ -86,11 +95,13 @@ public class NetworkIO{
             SaveIO.getSaveWriter().readContentHeader(stream);
             SaveIO.getSaveWriter().readMap(stream, world.context);
             SaveIO.getSaveWriter().readTeamBlocks(stream);
+            if(!LogicExt.v146Mode)
             SaveIO.getSaveWriter().readMarkers(stream);
             SaveIO.getSaveWriter().readCustomChunks(stream);
         }catch(IOException e){
             throw new RuntimeException(e);
         }finally{
+            if(!LogicExt.contentsCompatibleMode)
             content.setTemporaryMapper(null);
         }
     }
diff --git a/core/src/mindustry/net/Packets.java b/core/src/mindustry/net/Packets.java
index 1b445b3ff268b1d626cf9ba84797560c04e9bb0a..8f91b6abf01af158cb8b2c81d10b55b3887b006d 100644
--- a/core/src/mindustry/net/Packets.java
+++ b/core/src/mindustry/net/Packets.java
@@ -124,7 +124,7 @@ public class Packets{
         @Override
         public void write(Writes buffer){
             buffer.i(clientVersion != 0 ? clientVersion : Version.build);
-            TypeIO.writeString(buffer, versionType);
+            TypeIO.writeString(buffer, clientVersion < 1000 ? "official" : versionType);
             TypeIO.writeString(buffer, name);
             TypeIO.writeString(buffer, locale);
             TypeIO.writeString(buffer, usid);
