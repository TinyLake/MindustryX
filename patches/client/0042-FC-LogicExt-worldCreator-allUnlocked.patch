From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sun, 8 Sep 2024 15:43:00 +0800
Subject: [PATCH] =?UTF-8?q?FC(LogicExt)=20worldCreator=20(=E5=88=9B?=
 =?UTF-8?q?=E4=B8=96=E7=A5=9E)=20allUnlocked=20(=E8=A7=A3=E7=A6=81)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../mindustry/ctype/UnlockableContent.java    |  3 +-
 .../mindustry/ui/dialogs/DatabaseDialog.java  | 14 +++++-
 .../ui/fragments/PlacementFragment.java       | 32 ++++++++++++-
 core/src/mindustry/world/Block.java           |  4 +-
 core/src/mindustry/world/Build.java           | 45 +++++++++++++++++++
 .../mindustry/world/blocks/ItemSelection.java |  3 +-
 6 files changed, 94 insertions(+), 7 deletions(-)

diff --git a/core/src/mindustry/ctype/UnlockableContent.java b/core/src/mindustry/ctype/UnlockableContent.java
index faf53c8363263bbf7592ebf18111fefb8984bbe0..abd0e785366465105a611a98c072cbe31aad4152 100644
--- a/core/src/mindustry/ctype/UnlockableContent.java
+++ b/core/src/mindustry/ctype/UnlockableContent.java
@@ -16,6 +16,7 @@ import mindustry.graphics.MultiPacker.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -212,7 +213,7 @@ public abstract class UnlockableContent extends MappableContent{
 
     /** @return whether this content is unlocked, or the player is in a custom (non-campaign) game. */
     public boolean unlockedNow(){
-        return unlocked() || !state.isCampaign();
+        return LogicExt.allUnlocked || unlocked() || !state.isCampaign();
     }
 
     public boolean locked(){
diff --git a/core/src/mindustry/ui/dialogs/DatabaseDialog.java b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
index 9ef878c280d567340d9fc4753d310b73be3397a2..1351f6f910d6f544d134e2af81d54611abfd401d 100644
--- a/core/src/mindustry/ui/dialogs/DatabaseDialog.java
+++ b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
@@ -16,6 +16,8 @@ import mindustry.graphics.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustryX.features.*;
+import mindustryX.features.Settings;
 
 import static arc.Core.*;
 import static mindustry.Vars.*;
@@ -32,6 +34,12 @@ public class DatabaseDialog extends BaseDialog{
         shown(this::rebuild);
         onResize(this::rebuild);
 
+        buttons.button("解禁", Styles.togglet, () -> {
+            Settings.toggle("allUnlocked");
+            LogicExt.allUnlocked = Core.settings.getBool("allUnlocked");//need for rebuild
+            rebuild();
+        }).checked((b) -> LogicExt.allUnlocked);
+
         all.margin(20).marginTop(0f);
 
         cont.table(s -> {
@@ -53,7 +61,9 @@ public class DatabaseDialog extends BaseDialog{
             ContentType type = ContentType.all[j];
 
             Seq<UnlockableContent> array = allContent[j]
-                .select(c -> c instanceof UnlockableContent u && !u.isHidden()  &&
+                .select(c -> c instanceof UnlockableContent u &&
+                    (LogicExt.allUnlocked || !u.isHidden() ) &&
+
                     (text.isEmpty() || u.localizedName.toLowerCase().contains(text.toLowerCase()))).as();
             if(array.size == 0) continue;
 
@@ -115,6 +125,6 @@ public class DatabaseDialog extends BaseDialog{
     }
 
     boolean unlocked(UnlockableContent content){
-        return (!Vars.state.isCampaign() && !Vars.state.isMenu()) || content.unlocked();
+        return LogicExt.allUnlocked || (!Vars.state.isCampaign() && !Vars.state.isMenu()) || content.unlocked();
     }
 }
diff --git a/core/src/mindustry/ui/fragments/PlacementFragment.java b/core/src/mindustry/ui/fragments/PlacementFragment.java
index 966520f5c00e34e56f3f1cd8e315e338d4812a61..284e8b637ea33574094a21827b4c5e771e40805f 100644
--- a/core/src/mindustry/ui/fragments/PlacementFragment.java
+++ b/core/src/mindustry/ui/fragments/PlacementFragment.java
@@ -24,12 +24,15 @@ import mindustry.input.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustry.world.blocks.*;
 import mindustry.world.blocks.ConstructBlock.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
 public class PlacementFragment{
     final int rowWidth = 4;
+    private boolean lastAllUnlocked = LogicExt.allUnlocked;
 
     public Category currentCategory = Category.distribution;
 
@@ -106,6 +109,10 @@ public class PlacementFragment{
                 if(nextFlowBuild.flowItems() != null) nextFlowBuild.flowItems().updateFlow();
                 if(nextFlowBuild.liquids != null) nextFlowBuild.liquids.updateFlow();
             }
+
+            if(lastAllUnlocked != LogicExt.allUnlocked){
+                rebuild();
+            }
         });
     }
 
@@ -128,6 +135,27 @@ public class PlacementFragment{
         if(Core.input.keyTap(Binding.pick) && player.isBuilder() && !Core.scene.hasDialog()){ //mouse eyedropper select
             var build = world.buildWorld(Core.input.mouseWorld().x, Core.input.mouseWorld().y);
 
+            if (build == null && LogicExt.worldCreator) {
+                var tile = world.tileWorld(Core.input.mouseWorld().x, Core.input.mouseWorld().y);
+                if (tile != null) {
+                    Block target;
+                    if (tile.block() != Blocks.air) {
+                        target = tile.block();
+                    }
+                    else if (tile.overlay() != Blocks.air) {
+                        target = tile.overlay();
+                    }
+                    else {
+                        target = tile.floor();
+                    }
+                    if (target != Blocks.air && target.isVisible()) {
+                        input.block = target;
+                        currentCategory = input.block.category;
+                        return true;
+                    }
+
+                }
+            }
             //can't middle click buildings in fog
             if(build != null && build.inFogTo(player.team())){
                 build = null;
@@ -242,6 +270,7 @@ public class PlacementFragment{
     }
 
     public void build(Group parent){
+        lastAllUnlocked = LogicExt.allUnlocked;
         parent.fill(full -> {
             toggler = full;
             full.bottom().right().visible(() -> ui.hudfrag.shown);
@@ -260,6 +289,7 @@ public class PlacementFragment{
 
                     for(Block block : getUnlockedByCategory(currentCategory)){
                         if(!unlocked(block)) continue;
+                        if (block == Blocks.air || block instanceof ConstructBlock) continue;
                         if(index++ % rowWidth == 0){
                             blockTable.row();
                         }
@@ -646,7 +676,7 @@ public class PlacementFragment{
     }
 
     boolean unlocked(Block block){
-        return block.unlockedNow() && block.placeablePlayer && block.environmentBuildable() &&
+        return LogicExt.allUnlocked || block.unlockedNow() && block.placeablePlayer && block.environmentBuildable() &&
             block.supportsEnv(state.rules.env); //TODO this hides env unsupported blocks, not always a good thing
     }
 
diff --git a/core/src/mindustry/world/Block.java b/core/src/mindustry/world/Block.java
index e8c7594bac9e5417902db4440c9c0eea375fd1f7..6eec69e569b680ee6290fd666f0fd22609425934 100644
--- a/core/src/mindustry/world/Block.java
+++ b/core/src/mindustry/world/Block.java
@@ -883,7 +883,7 @@ public class Block extends UnlockableContent implements Senseable{
     }
 
     public boolean isVisible(){
-        return !isHidden() && (state.rules.editor || (!state.rules.hideBannedBlocks || !state.rules.isBanned(this)));
+        return LogicExt.allUnlocked || !isHidden() && (state.rules.editor || (!state.rules.hideBannedBlocks || !state.rules.isBanned(this)));
     }
 
     public boolean isVisibleOn(Planet planet){
@@ -891,7 +891,7 @@ public class Block extends UnlockableContent implements Senseable{
     }
 
     public boolean isPlaceable(){
-        return isVisible() && (!state.rules.isBanned(this) || state.rules.editor) && supportsEnv(state.rules.env);
+        return LogicExt.worldCreator || isVisible() && (!state.rules.isBanned(this) || state.rules.editor) && supportsEnv(state.rules.env);
     }
 
     /** @return whether this block supports a specific environment. */
diff --git a/core/src/mindustry/world/Build.java b/core/src/mindustry/world/Build.java
index e5a9064930f35b01c57e2f4e84ee3c08b49e3838..a4f4a9ed2eac2155e90430a3469e5fe21fad0794 100644
--- a/core/src/mindustry/world/Build.java
+++ b/core/src/mindustry/world/Build.java
@@ -14,7 +14,10 @@ import mindustry.game.Teams.*;
 import mindustry.gen.*;
 import mindustry.world.blocks.*;
 import mindustry.world.blocks.ConstructBlock.*;
+import mindustry.world.blocks.environment.Floor;
+import mindustry.world.blocks.environment.OverlayFloor;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -69,6 +72,36 @@ public class Build{
             return;
         }
 
+        if(LogicExt.worldCreator){
+            Tile tile = world.tile(x, y);
+            if(tile == null) return;
+            if(result == Blocks.cliff) {
+                int rotationb = 0;
+                for(int i = 0; i < 8; i++){
+                    Tile other = world.tiles.get(tile.x + Geometry.d8[i].x, tile.y + Geometry.d8[i].y);
+                    if(other != null && !other.floor().hasSurface()){
+                        rotationb |= (1 << i);
+                    }
+                }
+
+                if(rotationb != 0){
+                    tile.setBlock(Blocks.cliff);
+                }
+
+                tile.data = (byte)rotationb;
+                return;
+            };
+            if(result instanceof OverlayFloor){
+                tile.setOverlay(result);
+                return;
+            }
+            if(result instanceof Floor floor){
+                tile.setFloor(floor);
+                pathfinder.updateTile(tile);
+                return;
+            }
+        }
+
         Tile tile = world.tile(x, y);
 
         //just in case
@@ -127,6 +160,17 @@ public class Build{
 
     /** Returns whether a tile can be placed at this location by this team. */
     public static boolean validPlace(Block type, Team team, int x, int y, int rotation, boolean checkVisible){
+        if (LogicExt.worldCreator) {
+            Tile tile = world.tile(x, y);
+            if (tile == null) return false;
+            if (type instanceof OverlayFloor of) {
+                return !(tile.overlay == of);
+            }
+            if (type instanceof Floor f) {
+                return !(tile.floor == f);
+            }
+            return true;
+        }
         //the wave team can build whatever they want as long as it's visible - banned blocks are not applicable
         if(type == null || (checkVisible && (!type.environmentBuildable() || (!type.isPlaceable() && !(state.rules.waves && team == state.rules.waveTeam && type.isVisible()))))){
             return false;
@@ -256,6 +300,7 @@ public class Build{
     /** Returns whether the tile at this position is breakable by this team */
     public static boolean validBreak(Team team, int x, int y){
         Tile tile = world.tile(x, y);
+        if(LogicExt.worldCreator && tile.block() != Blocks.air) return true;
         return tile != null && tile.block().canBreak(tile) && tile.breakable() && tile.interactable(team);
     }
 }
diff --git a/core/src/mindustry/world/blocks/ItemSelection.java b/core/src/mindustry/world/blocks/ItemSelection.java
index 483ba2813465888e23bbc60bd5bada94d237897c..f73da2f21339016b16af42fd5c685808f9d733e2 100644
--- a/core/src/mindustry/world/blocks/ItemSelection.java
+++ b/core/src/mindustry/world/blocks/ItemSelection.java
@@ -12,6 +12,7 @@ import mindustry.gen.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -65,7 +66,7 @@ public class ItemSelection{
 
             Seq<T> list = items.select(u -> (text.isEmpty() || u.localizedName.toLowerCase().contains(text.toLowerCase())));
             for(T item : list){
-                if(!item.unlockedNow() || (item instanceof Item checkVisible && state.rules.hiddenBuildItems.contains(checkVisible)) || item.isHidden()) continue;
+                if(!LogicExt.allUnlocked && (!item.unlockedNow() || (item instanceof Item checkVisible && state.rules.hiddenBuildItems.contains(checkVisible)) || item.isHidden())) continue;
 
                 ImageButton button = cont.button(Tex.whiteui, Styles.clearNoneTogglei, Mathf.clamp(item.selectionSize, 0f, 40f), () -> {
                     if(closeSelect) control.input.config.hideConfig();
