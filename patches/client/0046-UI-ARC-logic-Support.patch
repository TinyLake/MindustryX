From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sat, 13 Jul 2024 00:12:04 +0800
Subject: [PATCH] =?UTF-8?q?UI&ARC:=20logic=20Support=20=E5=A4=84=E7=90=86?=
 =?UTF-8?q?=E5=99=A8=E7=BC=96=E8=BE=91=E5=A2=9E=E5=BC=BA?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* 从Merged分离
* 修复注释切换功能；整理代码
* 实现JUMP跳转按钮
way-zer <himc.wicp@gmail.com> on 2024/7/13

重制内存元显示 和 处理器快捷显示
way-zer <himc.wicp@gmail.com> on 2024/7/14

防止多人模式下编辑世处，并给出提示
way-zer <himc.wicp@gmail.com> on 2024/9/8
---
 core/src/mindustry/logic/LCanvas.java         |  58 ++++++-
 core/src/mindustry/logic/LExecutor.java       |   3 +-
 core/src/mindustry/logic/LStatements.java     |  12 ++
 core/src/mindustry/logic/LogicDialog.java     | 146 +++++++++++++++++-
 .../world/blocks/logic/LogicBlock.java        |  72 ++++++++-
 .../world/blocks/logic/MemoryBlock.java       |  73 ++++++++-
 6 files changed, 347 insertions(+), 17 deletions(-)

diff --git a/core/src/mindustry/logic/LCanvas.java b/core/src/mindustry/logic/LCanvas.java
index 2bfd96ac4b9685bde38edee0d80be66380fdf6f2..ba5401c7c2ee4f8d9e7ffcc7da8ca3ad5bdb2a77 100644
--- a/core/src/mindustry/logic/LCanvas.java
+++ b/core/src/mindustry/logic/LCanvas.java
@@ -18,6 +18,8 @@ import mindustry.gen.*;
 import mindustry.graphics.*;
 import mindustry.logic.LStatements.*;
 import mindustry.ui.*;
+import mindustryX.*;
+import mindustryX.features.*;
 
 public class LCanvas extends Table{
     private static final Seq<JumpCurve> tmpOccupiers1 = new Seq<>();
@@ -61,7 +63,7 @@ public class LCanvas extends Table{
 
     /** @return if statement elements should have rows. */
     public static boolean useRows(){
-        return Core.graphics.getWidth() < Scl.scl(900f) * 1.2f;
+        return Core.graphics.getWidth() - (Core.settings.getBool("logicSupport") ? 400f : 0f) < Scl.scl(900f) * 1.2f;
     }
 
     public static void tooltip(Cell<?> cell, String key){
@@ -433,14 +435,23 @@ public class LCanvas extends Table{
 
                 addressLabel = t.add(index + "").style(Styles.outlineLabel).color(color).padRight(8).get();
 
-                t.button(Icon.copy, Styles.logici, () -> {
-                }).size(24f).padRight(6).get().tapped(this::copy);
+                t.button(Icon.add, Styles.logici, () -> LogicDialog.showAddStatement(privileged, (it) -> {
+                    statements.addChildAfter(this, new StatementElem(it));
+                    statements.updateJumpHeights = true;
+                })).size(24f).padRight(6)
+                .get().tapped(()->{});//no drag
+
+                t.button(Icon.copy, Styles.logici, this::copy).size(24f).padRight(6)
+                .get().tapped(()->{});
+
+                t.button(st instanceof PrintStatement ? Icon.fileText : Icon.pencil, Styles.logici, this::toggleComment).size(24f).padRight(6)
+                .get().tapped(()->{});
 
                 t.button(Icon.cancel, Styles.logici, () -> {
                     remove();
                     dragging = null;
                     statements.updateJumpHeights = true;
-                }).size(24f);
+                }).size(24f).padLeft(Vars.mobile?48:0);
 
                 t.addListener(new InputListener(){
                     float lastx, lasty;
@@ -519,6 +530,45 @@ public class LCanvas extends Table{
             }
         }
 
+        //原始作者: LC
+        @MindustryXApi
+        public void toggleComment(){
+            StatementElem newElem;
+            if(st instanceof PrintStatement pst){ //print->代码
+                String code = pst.value.replace("_", " ");
+                Seq<LStatement> lsStatement = LAssembler.read(code, privileged);
+                LStatement stNew = lsStatement.first();
+                if(stNew instanceof InvalidStatement){
+                    UIExt.announce("[orange]警告：转换失败，请输入正确格式");
+                    return;
+                }
+                newElem = new StatementElem(stNew);
+            }else{  //代码->print
+                st.saveUI();
+                StringBuilder thisText = new StringBuilder();
+                LogicIO.write(st, thisText);
+                var stNew = new PrintStatement();
+                stNew.value = thisText.toString().replace(' ','_');
+                newElem = new StatementElem(stNew);
+            }
+            for(Element c : statements.getChildren()){
+                if(c instanceof StatementElem ste && ste.st instanceof JumpStatement jst && (jst.dest == null || jst.dest == st.elem)){
+                    if(0 > jst.destIndex || jst.destIndex >= statements.getChildren().size) continue;
+                    jst.saveUI();
+                }
+            }
+            statements.addChildBefore(this, newElem);
+            remove();
+            for(Element c : statements.getChildren()){
+                if(c instanceof StatementElem ste && ste.st instanceof JumpStatement jst && (jst.dest == null || jst.dest == st.elem)){
+                    if(0 > jst.destIndex || jst.destIndex >= statements.getChildren().size) continue;
+                    jst.setupUI();
+                }
+            }
+            newElem.st.setupUI();
+        }
+
+
         @Override
         public void draw(){
             float pad = 5f;
diff --git a/core/src/mindustry/logic/LExecutor.java b/core/src/mindustry/logic/LExecutor.java
index 07721e1d4e0e3662320d0b49e31f7ef528b34eb4..c7a5fbefd8e4880b99f07f7dba50cd287d53c1eb 100644
--- a/core/src/mindustry/logic/LExecutor.java
+++ b/core/src/mindustry/logic/LExecutor.java
@@ -515,6 +515,7 @@ public class LExecutor{
         public void run(LExecutor exec){
             Object obj = target.obj();
             if(obj instanceof Building b && (exec.privileged || (b.team == exec.team && exec.linkIds.contains(b.id)))){
+                b.lastLogicController = exec.build;
 
                 if(type == LAccess.enabled && !p1.bool()){
                     b.lastDisabler = exec.build;
@@ -1244,7 +1245,7 @@ public class LExecutor{
         @Override
         public void run(LExecutor exec){
             if(headless) return;
-
+            if(Core.settings.getBool("removeLogicLock"))return;
             switch(action){
                 case pan -> {
                     control.input.logicCutscene = true;
diff --git a/core/src/mindustry/logic/LStatements.java b/core/src/mindustry/logic/LStatements.java
index eda6c92c970e9f3f632094cd5018dcdf9a711d64..b65fb50382f246452b7c75a788e3bd5f61b71bdf 100644
--- a/core/src/mindustry/logic/LStatements.java
+++ b/core/src/mindustry/logic/LStatements.java
@@ -22,6 +22,7 @@ import mindustry.ui.*;
 import mindustry.world.*;
 import mindustry.world.meta.*;
 import mindustryX.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 import static mindustry.logic.LCanvas.*;
@@ -945,6 +946,17 @@ public class LStatements{
             table.table(this::rebuild);
 
             table.add().growX();
+            if(!mobile || !Core.graphics.isPortrait()){
+                table.button("JUMP", () -> {
+                    if(dest == null) return;
+                    //table, elem, dragLayout, table(y), scrollPane
+                    var canvas = dest.parent.parent;
+                    var scroll = (ScrollPane)canvas.parent;
+                    scroll.setScrollY(scroll.getMaxY() - dest.y + scroll.getHeight() * 0.5f);
+                    saveUI();
+                    UIExt.announce("[gold]跳转行号:[] " + destIndex);
+                });
+            }
             table.add(new JumpButton(() -> dest, s -> dest = s, this.elem)).size(30).right().padLeft(-8);
 
             String name = name();
diff --git a/core/src/mindustry/logic/LogicDialog.java b/core/src/mindustry/logic/LogicDialog.java
index 047e54c99c9605494ac29adc192f6f3b2ac5311a..a69ff47c5b380f76e0961fe776afeca38ca62572 100644
--- a/core/src/mindustry/logic/LogicDialog.java
+++ b/core/src/mindustry/logic/LogicDialog.java
@@ -5,6 +5,7 @@ import arc.func.*;
 import arc.graphics.*;
 import arc.input.*;
 import arc.scene.actions.*;
+import arc.scene.event.*;
 import arc.scene.ui.*;
 import arc.scene.ui.TextButton.*;
 import arc.scene.ui.layout.*;
@@ -19,6 +20,9 @@ import mindustry.logic.LStatements.*;
 import mindustry.ui.*;
 import mindustry.ui.dialogs.*;
 import mindustry.world.blocks.logic.*;
+import mindustryX.*;
+import mindustryX.features.*;
+import mindustryX.features.Settings;
 
 import java.util.*;
 
@@ -29,6 +33,10 @@ public class LogicDialog extends BaseDialog{
     public LCanvas canvas;
     Cons<String> consumer = s -> {};
     boolean privileged;
+    private static float period = 15f;
+    Table varTable = new Table();
+    private static boolean refreshing = true, doRefresh, noSave;
+
     @Nullable LExecutor executor;
     GlobalVarsDialog globalsDialog = new GlobalVarsDialog();
     boolean wasRows, wasPortrait, forceRestart;
@@ -48,11 +56,17 @@ public class LogicDialog extends BaseDialog{
             wasRows = LCanvas.useRows();
             wasPortrait = Core.graphics.isPortrait();
         });
-        hidden(() -> consumer.get(canvas.save()));
+        hidden(() -> {
+            if(!noSave){
+                consumer.get(canvas.save());
+            } else {
+                noSave = false;
+            }});
         onResize(() -> {
             if(wasRows != LCanvas.useRows() || wasPortrait != Core.graphics.isPortrait()){
                 setup();
                 canvas.rebuild();
+                buildVarsTable();
                 wasPortrait = Core.graphics.isPortrait();
                 wasRows = LCanvas.useRows();
             }
@@ -66,12 +80,126 @@ public class LogicDialog extends BaseDialog{
         });
 
         add(canvas).grow().name("canvas");
+        addChild(new Table(t -> {
+            t.name = "logicSupport";
+            t.setFillParent(true);
+            t.visible(() -> Core.settings.getBool("logicSupport"));
+
+            t.center().left();
+            t.table(this::buildLogicSupport).growY();
+            Interval interval = new Interval();
+            t.update(() -> {
+                if(!varTable.hasChildren()) buildVarsTable();
+                doRefresh = refreshing && interval.get(period);
+            });
+        }));
+        addChild(new Table(t -> {
+            t.name = "open_logicSupport";
+            t.setFillParent(true);
+            t.visible(() -> !Core.settings.getBool("logicSupport"));
+
+            t.center().left().button(Icon.rightOpen, Styles.clearNonei, iconMed, () -> Settings.toggle("logicSupport"));
+        }));
 
         row();
 
         add(buttons).growX().name("canvas");
     }
 
+    private void buildLogicSupport(Table table){
+        table.background(Styles.black3);
+        table.table(t -> {
+            t.table(tt -> {
+                tt.add("刷新间隔").padRight(5f).left();
+                TextField field = tt.field((int)period + "", text -> period = Integer.parseInt(text)).width(100f).valid(Strings::canParsePositiveInt).maxTextLength(5).get();
+                tt.slider(1, 60, 1, period, res -> {
+                    period = res;
+                    field.setText((int)res + "");
+                });
+            });
+            t.row();
+            t.table(tt -> {
+                tt.defaults().size(50f);
+                tt.button(Icon.downloadSmall, Styles.cleari, () -> {
+                    executor.build.updateCode(executor.build.code);
+                    buildVarsTable();
+                    UIExt.announce("[orange]已重新加载逻辑！");
+                }).tooltip("加载逻辑代码");
+                tt.button(Icon.refreshSmall, Styles.clearTogglei, () -> {
+                    refreshing = !refreshing;
+                    String text = "[orange]已" + (refreshing ? "开启" : "关闭") + "逻辑刷新";
+                    UIExt.announce(text);
+                }).checked((b) -> refreshing).tooltip("辅助器自动刷新");
+                tt.button(Icon.pause, Styles.clearTogglei, () -> {
+                    if(state.isPaused()) state.set(State.playing);
+                    else state.set(State.paused);
+                    String text = state.isPaused() ? "已暂停" : "已继续游戏";
+                    UIExt.announce(text);
+                }).checked((b) -> state.isPaused()).tooltip("暂停逻辑(游戏)运行");
+                tt.button(Icon.eyeOffSmall, Styles.cleari, () -> Settings.toggle("logicSupport")).tooltip("隐藏逻辑辅助器");
+            });
+        }).row();
+        table.pane(varTable).width(400f).padLeft(20f);
+    }
+
+    private void buildVarsTable(){
+        varTable.clearChildren();
+        if(executor == null) return;
+        varTable.defaults().padTop(10f);
+        for(var s : executor.vars){
+            if(s.name.startsWith("___")) continue;
+            varTable.table(Tex.whitePane, tt -> {
+                tt.table(tv -> {
+                    tv.labelWrap(s.name).width(100f);
+                    tv.touchable = Touchable.enabled;
+                    tv.tapped(() -> {
+                        Core.app.setClipboardText(s.name);
+                        UIExt.announce("[cyan]复制变量名[white]\n " + s.name);
+                    });
+                });
+                tt.table(tv -> {
+                    Label varPro = tv.labelWrap(arcVarsText(s)).width(200f).get();
+                    tv.touchable = Touchable.enabled;
+                    tv.tapped(() -> {
+                        Core.app.setClipboardText(varPro.getText().toString());
+                        UIExt.announce("[cyan]复制变量属性[white]\n " + varPro.getText());
+                    });
+                    tv.update(() -> {
+                        if(doRefresh){
+                            tt.setColor(arcVarsColor(s));
+                            varPro.setText(arcVarsText(s));
+                        }
+                    });
+                }).padLeft(20f);
+            }).row();
+        }
+        varTable.table(Tex.whitePane, tt -> {
+            tt.setColor(Color.valueOf("#e600e6"));
+            tt.add("@printbuffer").center().row();
+            var labelC = tt.labelWrap(() -> executor.textBuffer).labelAlign(Align.topLeft).minHeight(1).growX();
+            tt.update(() -> {
+                if(labelC.prefHeight() > labelC.minHeight())
+                    labelC.height(labelC.prefHeight());
+            });
+            tt.touchable = Touchable.enabled;
+            tt.tapped(() -> {
+                String text = executor.textBuffer.toString();
+                Core.app.setClipboardText(text);
+                UIExt.announce("[cyan]复制信息版[white]\n " + text);
+            });
+        }).padLeft(4f).fillX().row();
+    }
+
+    public static String arcVarsText(LVar s){
+        return s.isobj ? PrintI.toString(s.objval) : Math.abs(s.numval - (long)s.numval) < 0.00001 ? (long)s.numval + "" : s.numval + "";
+    }
+
+    public static Color arcVarsColor(LVar s){
+        if(s.constant && s.name.startsWith("@")) return Color.goldenrod;
+        else if (s.constant) return Color.valueOf("00cc7e");
+        else return typeColor(s,new Color());
+    }
+
     public static Color typeColor(LVar s, Color color){
         return color.set(
             !s.isobj ? Pal.place :
@@ -150,6 +278,12 @@ public class LogicDialog extends BaseDialog{
                         hide();
                     }).marginLeft(12f);
 
+                    t.row();
+                    t.button("[orange]丢弃更改", Icon.cancel,style, () -> ui.showConfirm("确认丢弃?", () -> {
+                        noSave = true;
+                        dialog.hide();
+                        hide();
+                    })).marginLeft(12f);
                 });
             });
 
@@ -254,6 +388,11 @@ public class LogicDialog extends BaseDialog{
     }
 
     public void showAddDialog(){
+        showAddStatement(privileged, (t) -> canvas.add(t));
+    }
+
+    @MindustryXApi
+    public static void showAddStatement(boolean privileged, Cons<LStatement> cons){
         BaseDialog dialog = new BaseDialog("@add");
         dialog.cont.table(table -> {
             String[] searchText = {""};
@@ -278,7 +417,7 @@ public class LogicDialog extends BaseDialog{
 
                     search.keyDown(KeyCode.enter, () -> {
                         if(!searchText[0].isEmpty() && matched[0] != null){
-                            canvas.add((LStatement)matched[0].get());
+                            cons.get((LStatement)matched[0].get());
                             dialog.hide();
                         }
                     });
@@ -325,7 +464,7 @@ public class LogicDialog extends BaseDialog{
                         style.font = Fonts.outline;
 
                         cat.button(example.name(), style, () -> {
-                            canvas.add(prov.get());
+                            cons.get(prov.get());
                             dialog.hide();
                         }).size(130f, 50f).self(c -> tooltip(c, "lst." + example.name())).top().left();
 
@@ -344,6 +483,7 @@ public class LogicDialog extends BaseDialog{
         this.executor = executor;
         this.privileged = privileged;
         this.forceRestart = false;
+        varTable.clearChildren();
         canvas.statements.clearChildren();
         canvas.rebuild();
         canvas.privileged = privileged;
diff --git a/core/src/mindustry/world/blocks/logic/LogicBlock.java b/core/src/mindustry/world/blocks/logic/LogicBlock.java
index 24465dba760b6204352aaa767287175307264e48..cf8a94cf7f4bb1e0bf223aa406acc62b4b48fc78 100644
--- a/core/src/mindustry/world/blocks/logic/LogicBlock.java
+++ b/core/src/mindustry/world/blocks/logic/LogicBlock.java
@@ -16,6 +16,7 @@ import arc.util.io.*;
 import arc.util.pooling.*;
 import mindustry.ai.types.*;
 import mindustry.core.*;
+import mindustry.game.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
 import mindustry.io.*;
@@ -27,6 +28,7 @@ import mindustry.world.blocks.ConstructBlock.*;
 import mindustry.world.meta.*;
 import mindustryX.*;
 import mindustryX.events.*;
+import mindustryX.features.*;
 
 import java.io.*;
 import java.util.zip.*;
@@ -110,11 +112,15 @@ public class LogicBlock extends Block{
 
     @Override
     public boolean checkForceDark(Tile tile){
-        return !accessible();
+        return !accessibleRead();
     }
 
     public boolean accessible(){
-        return !privileged || state.rules.editor || state.playtestingMap != null || state.rules.allowEditWorldProcessors;
+        return !privileged || state.rules.editor || state.playtestingMap != null || state.rules.allowEditWorldProcessors || RenderExt.editOtherBlock;
+    }
+
+    private boolean accessibleRead(){
+        return accessible() || RenderExt.showOtherInfo;
     }
 
     @Override
@@ -260,6 +266,8 @@ public class LogicBlock extends Block{
         public @Nullable String tag;
         public char iconTag;
 
+        private static boolean showVars = false;
+
         /** Block of code to run after load. */
         public @Nullable Runnable loadBlock;
 
@@ -432,7 +440,7 @@ public class LogicBlock extends Block{
 
         @Override
         public boolean displayable(){
-            return accessible();
+            return accessibleRead();
         }
 
         @Override
@@ -455,7 +463,12 @@ public class LogicBlock extends Block{
 
         @Override
         public Cursor getCursor(){
-            return !accessible() ? SystemCursor.arrow : super.getCursor();
+            return !accessibleRead() ? SystemCursor.arrow : super.getCursor();
+        }
+
+        @Override
+        public boolean interactable(Team team){
+            return super.interactable(team) || accessibleRead();
         }
 
         //logic blocks cause write problems when picked up
@@ -591,17 +604,19 @@ public class LogicBlock extends Block{
             }
 
             //draw top text on separate layer
+            //draw link order
+            int i = 0;
             for(LogicLink l : links){
                 Building build = world.build(l.x, l.y);
                 if(l.active && validLink(build)){
-                    build.block.drawPlaceText(l.name, build.tileX(), build.tileY(), true);
+                    build.block.drawPlaceText(l.name + "[" + i++ + "]", build.tileX(), build.tileY(), true);
                 }
             }
         }
 
         @Override
         public void drawSelect(){
-            if(!accessible()) return;
+            if(!accessibleRead()) return;
 
             Groups.unit.each(u -> u.controller() instanceof LogicAI ai && ai.controller == this, unit -> {
                 Drawf.square(unit.x, unit.y, unit.hitSize, unit.rotation + 45);
@@ -648,12 +663,53 @@ public class LogicBlock extends Block{
 
         @Override
         public boolean shouldShowConfigure(Player player){
-            return accessible();
+            return accessibleRead();
         }
 
         @Override
         public void buildConfiguration(Table table){
-            table.button(Icon.pencil, Styles.cleari, this::showEditDialog).size(40);
+            table.setBackground(Styles.black3);
+            Table vars = new Table();
+            table.table(t -> {
+                t.button(Icon.pencil, Styles.cleari, ()->{
+                    if(!accessible())
+                        UIExt.announce("[yellow]当前无权编辑，仅供查阅");
+                    showEditDialog();
+                }).size(40);
+                t.button(Icon.info, Styles.cleari, () -> {
+                    showVars = !showVars;
+                    vars.clear();
+                    if(showVars) buildVarsTable(vars);
+                }).size(40);
+            });
+            table.row().pane(Styles.noBarPane, vars).pad(4).maxHeight(400f).get().setScrollingDisabledX(true);
+            if(showVars) buildVarsTable(vars);
+        }
+
+        private void buildVarsTable(Table table){
+            final var vars = executor.vars;
+            table.update(() -> {
+                if(vars != executor.vars){
+                    table.clear();
+                    buildVarsTable(table);
+                    return;
+                }
+                table.getCells().each(cell -> {
+                    if(cell.prefWidth() > cell.maxWidth()){
+                        cell.width(cell.prefWidth());
+                        table.invalidateHierarchy();
+                    }
+                });
+                if(table.needsLayout()) table.parent.parent.pack();
+            });
+
+            table.setColor(Color.lightGray);
+            for(var s : vars){
+                if(s.name.startsWith("___")) continue;
+                table.add(s.name).color(LogicDialog.arcVarsColor(s)).align(Align.left);
+                table.label(() -> LogicDialog.arcVarsText(s)).align(Align.right).labelAlign(Align.right);
+                table.row();
+            }
         }
 
         public void showEditDialog(){
diff --git a/core/src/mindustry/world/blocks/logic/MemoryBlock.java b/core/src/mindustry/world/blocks/logic/MemoryBlock.java
index d384e23a42ae43ee612f5ecd20774dee281f2c03..224872d67a3e16c4fcbcdb11a141b5df4c701904 100644
--- a/core/src/mindustry/world/blocks/logic/MemoryBlock.java
+++ b/core/src/mindustry/world/blocks/logic/MemoryBlock.java
@@ -1,12 +1,20 @@
 package mindustry.world.blocks.logic;
 
+import arc.*;
+import arc.graphics.*;
+import arc.scene.event.*;
+import arc.scene.ui.layout.*;
+import arc.util.*;
 import arc.util.io.*;
 import mindustry.gen.*;
 import mindustry.logic.*;
+import mindustry.ui.*;
 import mindustry.world.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
-import static mindustry.Vars.*;
+import static mindustry.Vars.state;
 
 public class MemoryBlock extends Block{
     public int memoryCapacity = 32;
@@ -19,6 +27,7 @@ public class MemoryBlock extends Block{
         drawDisabled = false;
         envEnabled = Env.any;
         canOverdrive = false;
+        configurable = true;
     }
 
     @Override
@@ -39,6 +48,8 @@ public class MemoryBlock extends Block{
 
     public class MemoryBuild extends Building{
         public double[] memory = new double[memoryCapacity];
+        private static int numPerRow = 10;
+        private static final Format format = new Format(0, true);
 
         //massive byte size means picking up causes sync issues
         @Override
@@ -80,6 +91,66 @@ public class MemoryBlock extends Block{
             }
         }
 
+        @Override
+        public boolean onConfigureBuildTapped(Building other){
+            if(this == other || !accessible()){
+                deselect();
+                return false;
+            }
+            return super.onConfigureBuildTapped(other);
+        }
+
+        @Override
+        public void buildConfiguration(Table table){
+            if(!RenderExt.showOtherInfo && !accessible()){
+                //go away
+                deselect();
+                return;
+            }
+
+            Table vars = new Table();
+            table.background(Styles.black3);
+            table.table(t -> {
+                t.label(() -> "每行 " + numPerRow);
+                t.slider(2, 15, 1, numPerRow, res -> numPerRow = (int)res);
+
+                t.label(() -> "保留小数: " + format.getDecimal());
+                t.slider(0, 8, 1, format.getDecimal(), res -> format.setDecimal((int)res));
+
+                t.button(Icon.refresh, Styles.clearNonei, () -> {
+                    vars.clearChildren();
+                    buildVarsPane(vars);
+                });
+            }).row();
+            buildVarsPane(vars);
+            table.pane(Styles.noBarPane, vars).maxHeight(500f).pad(4).get().setScrollingDisabledX(true);
+            vars.update(() -> {
+                vars.getCells().each(cell -> {
+                    if(cell.prefWidth() > cell.maxWidth()){
+                        cell.width(cell.prefWidth());
+                        vars.invalidateHierarchy();
+                    }
+                });
+                if(vars.needsLayout()) table.pack();
+            });
+        }
+
+        public void buildVarsPane(Table t){
+            for(int i = 0; i < memory.length; i++){
+                int finalI = i;
+                t.add("[" + i + "]").color(Color.lightGray).align(Align.left);
+                t.add().width(8);
+                t.label(() -> format.format((float)memory[finalI])).align(Align.right).labelAlign(Align.right)
+                .touchable(Touchable.enabled).get().tapped(() -> {
+                    Core.app.setClipboardText(memory[finalI] + "");
+                    UIExt.announce("[cyan]复制内存[white]\n " + memory[finalI]);
+                });
+                if((i + 1) % numPerRow == 0) t.row();
+                else t.add("|").color(((i % numPerRow) % 2 == 0) ? Color.cyan : Color.acid)
+                .padLeft(12).padRight(12);
+            }
+        }
+
         @Override
         public void read(Reads read, byte revision){
             super.read(read, revision);
