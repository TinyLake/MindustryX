From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sun, 18 Feb 2024 15:58:00 +0800
Subject: [PATCH] H: misc
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

每个改动仅限连续的一段，且前有注释说明改动内容
---
 core/src/mindustry/ClientLauncher.java        |  7 +++++++
 core/src/mindustry/Vars.java                  |  5 +++++
 core/src/mindustry/core/Control.java          |  3 ++-
 core/src/mindustry/core/NetClient.java        |  4 ++++
 core/src/mindustry/core/Renderer.java         |  6 +++---
 core/src/mindustry/core/UI.java               | 20 ++-----------------
 core/src/mindustry/game/Schematics.java       |  8 +++++---
 .../mindustry/graphics/MinimapRenderer.java   |  6 ++++--
 core/src/mindustry/ui/dialogs/JoinDialog.java | 19 ++++++++++--------
 .../mindustry/ui/dialogs/KeybindDialog.java   |  9 ++++++---
 .../ui/fragments/BlockInventoryFragment.java  |  2 +-
 .../mindustry/ui/fragments/ChatFragment.java  |  3 +++
 .../mindustry/world/blocks/defense/Radar.java |  9 +++++++++
 .../world/blocks/distribution/Router.java     |  3 ++-
 .../world/blocks/production/BeamDrill.java    | 12 ++++-------
 .../mindustry/desktop/DesktopLauncher.java    | 12 ++++++++++-
 16 files changed, 79 insertions(+), 49 deletions(-)

diff --git a/core/src/mindustry/ClientLauncher.java b/core/src/mindustry/ClientLauncher.java
index 87c1dfce278bdc123ee761d8e1e16c2b883d2c8a..bb7e299b171161d1416d27e724a40968961725f9 100644
--- a/core/src/mindustry/ClientLauncher.java
+++ b/core/src/mindustry/ClientLauncher.java
@@ -36,6 +36,10 @@ public abstract class ClientLauncher extends ApplicationCore implements Platform
     @Override
     public void setup(){
         String dataDir = OS.env("MINDUSTRY_DATA_DIR");
+        //MDTX Auto discover `data` directory to use portal mode.
+        if(app.isDesktop() && dataDir == null && Fi.get("data").isDirectory()){
+            dataDir = "data";
+        }
         if(dataDir != null){
             Core.settings.setDataDirectory(files.absolute(dataDir));
         }
@@ -249,6 +253,9 @@ public abstract class ClientLauncher extends ApplicationCore implements Platform
             if(nextFrame > current){
                 long toSleep = nextFrame - current;
                 Threads.sleep(toSleep / 1000000, (int)(toSleep % 1000000));
+            }else{
+                //MDTX fix limitFps sometime not working.
+                nextFrame = current;
             }
         }
     }
diff --git a/core/src/mindustry/Vars.java b/core/src/mindustry/Vars.java
index ae716151e019fa61af85b99583d3bc8dba9a3e18..e57c060676ba4e9fe0745b39d59ed64493c501a1 100644
--- a/core/src/mindustry/Vars.java
+++ b/core/src/mindustry/Vars.java
@@ -378,6 +378,11 @@ public class Vars implements Loadable{
                 if(!headless && (ui == null || ui.consolefrag == null)){
                     logBuffer.add(result);
                 }else if(!headless){
+                    //MDTX add message to console
+                    if(!logBuffer.isEmpty()){
+                        logBuffer.each(ui.consolefrag::addMessage);
+                        logBuffer.clear();
+                    }
                     if(!OS.isWindows){
                         for(String code : ColorCodes.values){
                             result = result.replace(code, "");
diff --git a/core/src/mindustry/core/Control.java b/core/src/mindustry/core/Control.java
index 21047767677f54172ec1806ded2a925c438b2b86..a21b6481c1c56691bb8feeb49afce672e7e73811 100644
--- a/core/src/mindustry/core/Control.java
+++ b/core/src/mindustry/core/Control.java
@@ -575,7 +575,8 @@ public class Control implements ApplicationListener, Loadable{
                 BaseDialog dialog = new BaseDialog("@confirm");
                 dialog.setFillParent(true);
 
-                float[] countdown = {60 * 11};
+                //MDTX ARC: longer timeout
+                float[] countdown = {60 * 31};
                 Runnable exit = () -> {
                     Core.settings.put("uiscale", 100);
                     Core.settings.put("uiscalechanged", false);
diff --git a/core/src/mindustry/core/NetClient.java b/core/src/mindustry/core/NetClient.java
index 6f24e15192491a31258658dfa8ad843ac580e56b..c0344b8f94522bf0baf1968c09c47f62e3f64328 100644
--- a/core/src/mindustry/core/NetClient.java
+++ b/core/src/mindustry/core/NetClient.java
@@ -63,6 +63,10 @@ public class NetClient implements ApplicationListener{
     public NetClient(){
 
         net.handleClient(Connect.class, packet -> {
+            //MDTX ARC: fix name when quietReset
+            player.name = Core.settings.getString("name");
+            player.color.set(Core.settings.getInt("color-0"));
+
             Log.info("Connecting to server: @", packet.addressTCP);
 
             player.admin = false;
diff --git a/core/src/mindustry/core/Renderer.java b/core/src/mindustry/core/Renderer.java
index cabc19671d3393a933e64a5f451a0079beafa2b3..88308fb7d5b39c82207ea4b19f58705b086d62f0 100644
--- a/core/src/mindustry/core/Renderer.java
+++ b/core/src/mindustry/core/Renderer.java
@@ -50,7 +50,7 @@ public class Renderer implements ApplicationListener{
     public boolean animateShields, drawWeather = true, drawStatus, enableEffects, drawDisplays = true, drawLight = true, pixelate = false;
     public float weatherAlpha;
     /** minZoom = zooming out, maxZoom = zooming in */
-    public float minZoom = 1.5f, maxZoom = 6f;
+    public float minZoom = 0.25f, maxZoom = 20f;
     public Seq<EnvRenderer> envRenderers = new Seq<>();
     public ObjectMap<String, Runnable> customBackgrounds = new ObjectMap<>();
     public TextureRegion[] bubbles = new TextureRegion[16], splashes = new TextureRegion[12];
@@ -172,7 +172,7 @@ public class Renderer implements ApplicationListener{
             baseTarget = Mathf.lerp(minZoom, maxZoom, control.input.logicCutsceneZoom);
         }
 
-        float dest = Mathf.clamp(Mathf.round(baseTarget, 0.5f), minScale(), maxScale());
+        float dest = Mathf.clamp(Mathf.round(baseTarget, 0.1f), minScale(), maxScale());
         camerascale = Mathf.lerpDelta(camerascale, dest, 0.1f);
         if(Mathf.equal(camerascale, dest, 0.001f)) camerascale = dest;
         laserOpacity = settings.getInt("lasersopacity") / 100f;
@@ -528,7 +528,7 @@ public class Renderer implements ApplicationListener{
     }
 
     public void scaleCamera(float amount){
-        targetscale *= (amount / 4) + 1;
+        targetscale *= (amount / 6) + 1;
         clampScale();
     }
 
diff --git a/core/src/mindustry/core/UI.java b/core/src/mindustry/core/UI.java
index c5b749e3802b85e30de6eb10dc470455700aa5ba..7bf9cf271e2bdb6afc0fdba422f588c17ec7f8cc 100644
--- a/core/src/mindustry/core/UI.java
+++ b/core/src/mindustry/core/UI.java
@@ -586,7 +586,7 @@ public class UI implements ApplicationListener, Loadable{
         t.touchable = Touchable.disabled;
         t.margin(8f).add(text).style(Styles.outlineLabel).labelAlign(Align.center);
         t.update(() -> t.setPosition(Core.graphics.getWidth()/2f, Core.graphics.getHeight()/2f, Align.center));
-        t.actions(Actions.fadeOut(duration, Interp.pow4In), Actions.remove());
+        t.actions(Actions.fadeOut(Math.min(duration,30f), Interp.pow4In), Actions.remove());
         t.pack();
         t.act(0.1f);
         Core.scene.add(t);
@@ -690,23 +690,7 @@ public class UI implements ApplicationListener, Loadable{
     }
 
     public static String formatAmount(long number){
-        //prevent things like bars displaying erroneous representations of casted infinities
-        if(number == Long.MAX_VALUE) return "∞";
-        if(number == Long.MIN_VALUE) return "-∞";
-
-        long mag = Math.abs(number);
-        String sign = number < 0 ? "-" : "";
-        if(mag >= 1_000_000_000){
-            return sign + Strings.fixed(mag / 1_000_000_000f, 1) + "[gray]" + billions + "[]";
-        }else if(mag >= 1_000_000){
-            return sign + Strings.fixed(mag / 1_000_000f, 1) + "[gray]" + millions + "[]";
-        }else if(mag >= 10_000){
-            return number / 1000 + "[gray]" + thousands + "[]";
-        }else if(mag >= 1000){
-            return sign + Strings.fixed(mag / 1000f, 1) + "[gray]" + thousands + "[]";
-        }else{
-            return number + "";
-        }
+        return mindustryX.features.ui.FormatDefault.format(number);
     }
 
     public static int roundAmount(int number){
diff --git a/core/src/mindustry/game/Schematics.java b/core/src/mindustry/game/Schematics.java
index 32b304f3e9e708aed49ad1c43b3165dbfcb23873..0a7394838bbb36aa985383eae069f7bf6a1fb15d 100644
--- a/core/src/mindustry/game/Schematics.java
+++ b/core/src/mindustry/game/Schematics.java
@@ -97,7 +97,9 @@ public class Schematics implements Loadable{
         all.sort();
 
         if(shadowBuffer == null){
-            Core.app.post(() -> shadowBuffer = new FrameBuffer(maxSchematicSize + padding + 8, maxSchematicSize + padding + 8));
+            //MDTX: support larger schematic, maxSchematicSize may be MAX_VALUE
+            var size = Math.min(maxSchematicSize, 1024) + padding + 8;
+            Core.app.post(() -> shadowBuffer = new FrameBuffer(size, size));
         }
     }
 
@@ -542,7 +544,7 @@ public class Schematics implements Loadable{
         try(DataInputStream stream = new DataInputStream(new InflaterInputStream(input))){
             short width = stream.readShort(), height = stream.readShort();
 
-            if(width > 128 || height > 128) throw new IOException("Invalid schematic: Too large (max possible size is 128x128)");
+            if(width > 1024 || height > 1024) throw new IOException("Invalid schematic: Too large (max possible size is 128x128)");
 
             StringMap map = new StringMap();
             int tags = stream.readUnsignedByte();
@@ -568,7 +570,7 @@ public class Schematics implements Loadable{
 
             int total = stream.readInt();
 
-            if(total > 128 * 128) throw new IOException("Invalid schematic: Too many blocks.");
+            if(maxSchematicSize != Integer.MAX_VALUE && total > maxSchematicSize * maxSchematicSize) throw new IOException("Invalid schematic: Too many blocks.");
 
             Seq<Stile> tiles = new Seq<>(total);
             for(int i = 0; i < total; i++){
diff --git a/core/src/mindustry/graphics/MinimapRenderer.java b/core/src/mindustry/graphics/MinimapRenderer.java
index e19cb5fb99d1013911ad892249a67b0575dcb1f6..19736bd0dfb4235d6f753a6452198b3ca44d4f29 100644
--- a/core/src/mindustry/graphics/MinimapRenderer.java
+++ b/core/src/mindustry/graphics/MinimapRenderer.java
@@ -104,7 +104,8 @@ public class MinimapRenderer{
     }
 
     public void setZoom(float amount){
-        zoom = Mathf.clamp(amount, 1f, Math.min(world.width(), world.height()) / baseSize / 2f);
+        //MDTX ARC: max instead min to view full map.
+        zoom = Mathf.clamp(amount, 1f, Math.max(world.width(), world.height()) / baseSize / 2f);
     }
 
     public float getZoom(){
@@ -302,7 +303,8 @@ public class MinimapRenderer{
     public @Nullable TextureRegion getRegion(){
         if(texture == null) return null;
 
-        float sz = Mathf.clamp(baseSize * zoom, baseSize, Math.min(world.width(), world.height()));
+        //MDTX: use max to render full minimap.
+        float sz = Mathf.clamp(baseSize * zoom, baseSize, Math.max(world.width(), world.height()));
         float dx = (Core.camera.position.x / tilesize);
         float dy = (Core.camera.position.y / tilesize);
         dx = Mathf.clamp(dx, sz, world.width() - sz);
diff --git a/core/src/mindustry/ui/dialogs/JoinDialog.java b/core/src/mindustry/ui/dialogs/JoinDialog.java
index 3b826c3c79d6e0aaf5d51b91ce4283aa5db486c7..8e612c40aeec86cf4c1cbe271096d72615d2e6f8 100644
--- a/core/src/mindustry/ui/dialogs/JoinDialog.java
+++ b/core/src/mindustry/ui/dialogs/JoinDialog.java
@@ -58,11 +58,9 @@ public class JoinDialog extends BaseDialog{
 
         loadServers();
 
-        //mobile players don't get information >:(
-        boolean infoButton = !steam && !mobile;
-
-        if(infoButton) buttons.add().width(60f);
-        buttons.add().growX().width(-1);
+        //MDTX: keep for compatibility to CLaj Mod
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
 
         addCloseButton(mobile ? 190f : 210f);
 
@@ -70,9 +68,14 @@ public class JoinDialog extends BaseDialog{
             renaming = null;
             add.show();
         });
-
-        buttons.add().growX().width(-1);
-        if(infoButton) buttons.button("?", () -> ui.showInfo("@join.info")).size(60f, 64f);
+        //MDTX: keep for compatibility to CLaj Mod
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
+        //MDTX: better fixed info button
+        buttons.addChild(new Table(t -> {
+            t.setFillParent(true);
+            t.right().bottom().button("?", () -> ui.showInfo("@join.info")).size(60f, 64f);
+        }));
 
         add = new BaseDialog("@joingame.title");
         add.cont.add("@joingame.ip").padRight(5f).left();
diff --git a/core/src/mindustry/ui/dialogs/KeybindDialog.java b/core/src/mindustry/ui/dialogs/KeybindDialog.java
index 1f9ead9a31e94f8a4380c53889d31b229904ecc9..ec6ae607dffd5a4484c4e5d51a042e8b1d6051fe 100644
--- a/core/src/mindustry/ui/dialogs/KeybindDialog.java
+++ b/core/src/mindustry/ui/dialogs/KeybindDialog.java
@@ -143,7 +143,7 @@ public class KeybindDialog extends Dialog{
                         rebindAxis = true;
                         rebindMin = true;
                         openDialog(section, keybind);
-                    }).width(130f);
+                    }).width(100f);
                 }else{
                     table.add(bundle.get("keybind." + keybind.name() + ".name", Strings.capitalize(keybind.name())), Color.white).left().padRight(40).padLeft(8);
                     table.label(() -> keybinds.get(section, keybind).key.toString()).color(Pal.accent).left().minWidth(90).padRight(20);
@@ -152,9 +152,12 @@ public class KeybindDialog extends Dialog{
                         rebindAxis = false;
                         rebindMin = false;
                         openDialog(section, keybind);
-                    }).width(130f);
+                    }).width(100f);
                 }
-                table.button("@settings.resetKey", tstyle, () -> keybinds.resetToDefault(section, keybind)).width(130f).pad(2f).padLeft(4f);
+                table.button("取消绑定", tstyle, () -> {
+                    section.binds.get(section.device.type(), OrderedMap::new).put(keybind, new Axis(KeyCode.unset));
+                }).width(100f).pad(2f).padLeft(4f);
+                table.button("@settings.resetKey", tstyle, () -> keybinds.resetToDefault(section, keybind)).width(100f).pad(2f).padLeft(4f);
                 table.row();
             }
 
diff --git a/core/src/mindustry/ui/fragments/BlockInventoryFragment.java b/core/src/mindustry/ui/fragments/BlockInventoryFragment.java
index 84f5bc221c2f1846d831acf4abf902b15bfc1c59..4a8ef62fb82970df299159e53687f4c87b927f63 100644
--- a/core/src/mindustry/ui/fragments/BlockInventoryFragment.java
+++ b/core/src/mindustry/ui/fragments/BlockInventoryFragment.java
@@ -138,7 +138,7 @@ public class BlockInventoryFragment{
             }
         });
 
-        int cols = 3;
+        int cols = Core.settings.getInt("blockInventoryWidth", 3);
         int row = 0;
 
         table.margin(4f);
diff --git a/core/src/mindustry/ui/fragments/ChatFragment.java b/core/src/mindustry/ui/fragments/ChatFragment.java
index 30c344478857c5d20db41f89bc2358cee2c1c8e5..7a968f1c21275eb4a571350adfcf59df1fa37df9 100644
--- a/core/src/mindustry/ui/fragments/ChatFragment.java
+++ b/core/src/mindustry/ui/fragments/ChatFragment.java
@@ -5,6 +5,7 @@ import arc.Input.*;
 import arc.func.*;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
+import arc.input.*;
 import arc.math.*;
 import arc.scene.*;
 import arc.scene.ui.*;
@@ -73,6 +74,8 @@ public class ChatFragment extends Table{
                     historyPos--;
                     updateChat();
                 }
+                //MDTX: disable FocusTraversal when tab is used as chat_mode
+                chatfield.setFocusTraversal(keybinds.get(Binding.chat_mode).key != KeyCode.tab);
                 if(input.keyTap(Binding.chat_mode)){
                     nextMode();
                 }
diff --git a/core/src/mindustry/world/blocks/defense/Radar.java b/core/src/mindustry/world/blocks/defense/Radar.java
index e24a3368d190f64fdaf002130a76f4799834c9a5..0811c4520865cff648084cbc743a141367a103c5 100644
--- a/core/src/mindustry/world/blocks/defense/Radar.java
+++ b/core/src/mindustry/world/blocks/defense/Radar.java
@@ -3,12 +3,14 @@ package mindustry.world.blocks.defense;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
+import arc.math.geom.*;
 import arc.struct.*;
 import arc.util.io.*;
 import mindustry.*;
 import mindustry.annotations.Annotations.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
+import mindustry.input.*;
 import mindustry.world.*;
 import mindustry.world.meta.*;
 
@@ -45,6 +47,13 @@ public class Radar extends Block{
         Drawf.dashCircle(x * tilesize + offset, y * tilesize + offset, fogRadius * tilesize, Pal.accent);
     }
 
+    //MDTX: 自动控制放置距离
+    @Override
+    public void changePlacementPath(Seq<Point2> points, int rotation){
+        var placeRadius2 = Mathf.pow(fogRadius, 2f) * 3;//*2/sqrt(3)/2
+        Placement.calculateNodes(points, this, rotation, (point, other) -> point.dst2(other) <= placeRadius2);
+    }
+
     public class RadarBuild extends Building{
         public float progress;
         public float lastRadius = 0f;
diff --git a/core/src/mindustry/world/blocks/distribution/Router.java b/core/src/mindustry/world/blocks/distribution/Router.java
index 1e4a9399aac99d771d201d6ac01055295da686d4..fd1ef350517446c74427f85d27372bdd1a63cf22 100644
--- a/core/src/mindustry/world/blocks/distribution/Router.java
+++ b/core/src/mindustry/world/blocks/distribution/Router.java
@@ -41,7 +41,8 @@ public class Router extends Block{
 
         @Override
         public boolean canControl(){
-            return size == 1;
+            //MDTX ARC: router YES, larger router YES
+            return size != 0;
         }
 
         @Override
diff --git a/core/src/mindustry/world/blocks/production/BeamDrill.java b/core/src/mindustry/world/blocks/production/BeamDrill.java
index 21207b3cda92b0213698da21b028fcaa5df56f7f..309df4b375cf3dcdfe9530b5f3de8be65bb4748e 100644
--- a/core/src/mindustry/world/blocks/production/BeamDrill.java
+++ b/core/src/mindustry/world/blocks/production/BeamDrill.java
@@ -171,14 +171,10 @@ public class BeamDrill extends Block{
         }
 
         if(item != null){
-            float width = drawPlaceText(Core.bundle.formatFloat("bar.drillspeed", 60f / getDrillTime(item) * count, 2), x, y, valid);
-            if(!multiple){
-                float dx = x * tilesize + offset - width/2f - 4f, dy = y * tilesize + offset + size * tilesize / 2f + 5, s = iconSmall / 4f;
-                Draw.mixcol(Color.darkGray, 1f);
-                Draw.rect(item.fullIcon, dx, dy - 1, s, s);
-                Draw.reset();
-                Draw.rect(item.fullIcon, dx, dy, s, s);
-            }
+            //MDTX 增加加液速度显示
+            float speed = 60f / getDrillTime(item) * count;
+            String msg = Strings.format("@ [white]@@[] @[white]([cyan]@[])", Iconc.production, item.emoji(), item.localizedName, Strings.autoFixed(speed, 2), Strings.autoFixed(speed * optionalBoostIntensity, 2));
+            drawPlaceText(msg, x, y, valid);
         }else if(invalidItem != null){
             drawPlaceText(Core.bundle.get("bar.drilltierreq"), x, y, false);
         }
diff --git a/desktop/src/mindustry/desktop/DesktopLauncher.java b/desktop/src/mindustry/desktop/DesktopLauncher.java
index fd75f9dd7e3fc12e13f0a9ed86abd7639525afe6..da91e420825c8a83021d72b378d4316e06912ae6 100644
--- a/desktop/src/mindustry/desktop/DesktopLauncher.java
+++ b/desktop/src/mindustry/desktop/DesktopLauncher.java
@@ -23,6 +23,7 @@ import mindustry.net.*;
 import mindustry.net.Net.*;
 import mindustry.service.*;
 import mindustry.type.*;
+import mindustryX.*;
 
 import java.io.*;
 
@@ -67,6 +68,12 @@ public class DesktopLauncher extends ClientLauncher{
 
     public DesktopLauncher(String[] args){
         Version.init();
+        //MDTX, auto discover steam
+        String steamJar = "addon_steam.jar";
+        if(!OS.isAndroid && !OS.isIos && !VarsX.devVersion && (new Fi(steamJar).exists() || new Fi("steamworks4j.dll", FileType.classpath).exists())){
+            Version.modifier = "steam";
+            if(!new Fi(steamJar).exists()) steamJar = null;
+        }
         boolean useSteam = Version.modifier.contains("steam");
         testMobile = Seq.with(args).contains("-testMobile");
 
@@ -95,7 +102,10 @@ public class DesktopLauncher extends ClientLauncher{
             });
 
             try{
-                SteamAPI.loadLibraries();
+                //MDTX use arc.SharedLibraryLoader
+                new SharedLibraryLoader(steamJar).load("steam_api");
+                new SharedLibraryLoader(steamJar).load("steamworks4j");
+                SteamAPI.skipLoadLibraries();
 
                 if(!SteamAPI.init()){
                     loadError = true;
