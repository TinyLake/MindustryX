From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Thu, 27 Jun 2024 22:41:02 +0800
Subject: [PATCH] =?UTF-8?q?FC(LogicExt)=20terrainSchematic=20(=E5=9C=B0?=
 =?UTF-8?q?=E5=BD=A2=E8=93=9D=E5=9B=BE)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../mindustry/entities/comp/BuilderComp.java  |  3 +-
 core/src/mindustry/game/Schematics.java       | 37 ++++++++++++++++---
 core/src/mindustry/input/MobileInput.java     | 11 +-----
 .../world/blocks/environment/Floor.java       |  1 +
 4 files changed, 36 insertions(+), 16 deletions(-)

diff --git a/core/src/mindustry/entities/comp/BuilderComp.java b/core/src/mindustry/entities/comp/BuilderComp.java
index 09026d223f45f03a6ce814f377fc95172b3b9baa..6b0c11672bc9534e4b2c3109c06efc1bc6d5b7eb 100644
--- a/core/src/mindustry/entities/comp/BuilderComp.java
+++ b/core/src/mindustry/entities/comp/BuilderComp.java
@@ -18,6 +18,7 @@ import mindustry.type.*;
 import mindustry.world.*;
 import mindustry.world.blocks.*;
 import mindustry.world.blocks.ConstructBlock.*;
+import mindustryX.features.*;
 
 import java.util.*;
 
@@ -299,7 +300,7 @@ abstract class BuilderComp implements Posc, Statusc, Teamc, Rotc{
                 break;
             }
         }
-        if(replace != null){
+        if(!LogicExt.terrainSchematic && replace != null){
             plans.remove(replace);
         }
         Tile tile = world.tile(place.x, place.y);
diff --git a/core/src/mindustry/game/Schematics.java b/core/src/mindustry/game/Schematics.java
index 0ca9f1a37d3f46842a5d1212b0f633dd9de2ae48..82c93e03c4fc28e4ed8a150f460042b22bd7b4cc 100644
--- a/core/src/mindustry/game/Schematics.java
+++ b/core/src/mindustry/game/Schematics.java
@@ -35,6 +35,7 @@ import mindustry.world.blocks.sandbox.*;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import java.io.*;
 import java.util.zip.*;
@@ -284,7 +285,7 @@ public class Schematics implements Loadable{
     /** Creates an array of build plans from a schematic's data, centered on the provided x,y coordinates. */
     public Seq<BuildPlan> toPlans(Schematic schem, int x, int y, boolean checkHidden){
         return schem.tiles.map(t -> new BuildPlan(t.x + x - schem.width/2, t.y + y - schem.height/2, t.rotation, t.block, t.config))
-            .removeAll(s -> (checkHidden && !s.block.isVisible() && !(s.block instanceof CoreBlock)) || !s.block.unlockedNow()).sort(Structs.comparingInt(s -> -s.block.schematicPriority));
+            .removeAll(s -> !LogicExt.terrainSchematic && ((checkHidden && !s.block.isVisible() && !(s.block instanceof CoreBlock)) || !s.block.unlockedNow())).sort(Structs.comparingInt(s -> -s.block.schematicPriority));
     }
 
     /** @return all the valid loadouts for a specific core type. */
@@ -375,10 +376,10 @@ public class Schematics implements Loadable{
     public Schematic create(int x, int y, int x2, int y2){
         Team team = headless ? null : Vars.player.team();
         NormalizeResult result = Placement.normalizeArea(x, y, x2, y2, 0, false, maxSchematicSize);
-        x = result.x;
-        y = result.y;
-        x2 = result.x2;
-        y2 = result.y2;
+        x = Mathf.clamp(result.x, 0, world.width() - 1);
+        y = Mathf.clamp(result.y, 0, world.height() - 1);
+        x2 = Mathf.clamp(result.x2, 0, world.width() - 1);
+        y2 = Mathf.clamp(result.y2, 0, world.height() - 1);
 
         int ox = x, oy = y, ox2 = x2, oy2 = y2;
 
@@ -405,7 +406,7 @@ public class Schematics implements Loadable{
             }
         }
 
-        if(found){
+        if(found || LogicExt.terrainSchematic){
             x = minx;
             y = miny;
             x2 = maxx;
@@ -414,6 +415,20 @@ public class Schematics implements Loadable{
             return new Schematic(new Seq<>(), new StringMap(), 1, 1);
         }
 
+        if(LogicExt.terrainSchematic){
+            x = Math.min(x, ox + 1);
+            x2 = Math.max(x2, ox2 - 1);
+            y = Math.min(y, oy + 1);
+            y2 = Math.max(y2, oy2 - 1);
+            for(int cx = ox; cx <= ox2; cx++){
+                for(int cy = oy; cy <= oy2; cy++){
+                    Tile tile = world.tile(cx, cy);
+                    tiles.add(new Stile(tile.floor(), tile.x - x, tile.y - y, tile.floor().getConfig(tile), (byte)0));
+                    if(!tile.overlay().isAir())
+                        tiles.add(new Stile(tile.overlay(), tile.x - x, tile.y - y, tile.overlay().getConfig(tile), (byte)0));
+                }
+            }
+        }
         int width = x2 - x + 1, height = y2 - y + 1;
         int offsetX = -x, offsetY = -y;
         IntSet counted = new IntSet();
@@ -432,6 +447,16 @@ public class Schematics implements Loadable{
                 }
             }
         }
+        if(LogicExt.terrainSchematic){
+            for(int cx = ox; cx <= ox2; cx++){
+                for(int cy = oy; cy <= oy2; cy++){
+                    Tile tile = world.tile(cx, cy);
+                    Block block = tile.block();
+                    if(!block.isAir() && (tile.build == null || counted.add(tile.build.pos())))
+                        tiles.add(new Stile(block, tile.x - x, tile.y - y, block.getConfig(tile), (byte)0));
+                }
+            }
+        }
 
         return new Schematic(tiles, new StringMap(), width, height);
     }
diff --git a/core/src/mindustry/input/MobileInput.java b/core/src/mindustry/input/MobileInput.java
index 6be78abcb59271258d5dcade28d752e481e37c83..c96d1a87087cae47c3dd2223b22f004ee472f888 100644
--- a/core/src/mindustry/input/MobileInput.java
+++ b/core/src/mindustry/input/MobileInput.java
@@ -235,15 +235,8 @@ public class MobileInput extends InputHandler implements GestureListener{
                     if(tile != null){
                         if(!plan.breaking){
                             if(validPlace(plan.x, plan.y, plan.block, plan.rotation, null, true)){
-                                BuildPlan other = getPlan(plan.x, plan.y, plan.block.size, null);
-                                BuildPlan copy = plan.copy();
-
-                                if(other == null){
-                                    player.unit().addBuild(copy);
-                                }else if(!other.breaking && other.x == plan.x && other.y == plan.y && other.block.size == plan.block.size){
-                                    player.unit().plans().remove(other);
-                                    player.unit().addBuild(copy);
-                                }
+                                //MDTX: no need check other, addBuild will do it
+                                player.unit().addBuild(plan.copy());
                             }
 
                             rotation = plan.rotation;
diff --git a/core/src/mindustry/world/blocks/environment/Floor.java b/core/src/mindustry/world/blocks/environment/Floor.java
index dbd97cafe7985508b058cac0bb4fe20b7e578af2..1f4840480d91896d02fd0c631df8b02df8ff0a7d 100644
--- a/core/src/mindustry/world/blocks/environment/Floor.java
+++ b/core/src/mindustry/world/blocks/environment/Floor.java
@@ -111,6 +111,7 @@ public class Floor extends Block{
         instantBuild = true;
         ignoreBuildDarkness = true;
         placeEffect = Fx.rotateBlock;
+        schematicPriority = 100;
     }
 
     @Override
